using Microsoft.AspNetCore.Mvc;             // Pour g√©rer les contr√¥leurs et les actions d'API
using Microsoft.AspNetCore.Identity;        // Pour utiliser Identity (gestion des utilisateurs, r√¥les, etc.)
using Microsoft.AspNetCore.Authorization;   // Pour g√©rer les attributs d'autorisation
using System.IdentityModel.Tokens.Jwt;      // Pour manipuler les tokens JWT
using System.Security.Claims;               // Pour cr√©er et g√©rer les claims dans les tokens JWT
using Microsoft.IdentityModel.Tokens;       // Pour g√©rer la validation et la signature des tokens JWT
using System.Text;                          // Pour encoder les cl√©s de s√©curit√©
using Microsoft.AspNetCore.Http;            // Pour utiliser IFormFile (upload de fichiers)
using System.IO;                            // Pour utiliser Path et FileStream (gestion de fichiers)
using Microsoft.EntityFrameworkCore;        // Pour utiliser Entity Framework Core et les requ√™tes de base de donn√©es        
using LibraryAPI.Data;                      // Pour utiliser la m√©thode Include et le contexte ApplicationDbContext
using LibraryAPI.Models;                    // Pour acc√©der aux mod√®les de donn√©es (ApplicationUser, AuditActions, etc.)
using Microsoft.AspNetCore.RateLimiting;    // Pour la limitation du taux de requ√™tes (protection contre les abus)

namespace LibraryAPI.Controllers
{
    /// <summary>
    /// CONTR√îLEUR D'AUTHENTIFICATION ET GESTION DES UTILISATEURS
    /// 
    /// Ce contr√¥leur g√®re toutes les op√©rations li√©es aux utilisateurs :
    /// - Inscription (register)
    /// - Connexion (login) avec g√©n√©ration de tokens JWT
    /// - D√©connexion (logout)
    /// - Mise √† jour de profil avec upload d'images
    /// - Gestion administrative des utilisateurs (liste, recherche, etc.)
    /// - Notifications utilisateur
    /// 
    /// LOGS SERILOG (TECHNIQUES UNIQUEMENT) :
    /// - Erreurs techniques (exceptions, probl√®mes de BDD, etc.)
    /// - Probl√®mes de performance (op√©rations lentes)
    /// - Erreurs de configuration (cl√©s JWT manquantes, etc.)
    /// - Probl√®mes d'infrastructure (fichiers, dossiers, etc.)
    /// 
    /// NOTE : Les logs d'audit (qui fait quoi, quand) sont g√©r√©s s√©par√©ment
    /// </summary>
    [EnableRateLimiting("StrictPolicy")]  // Limitation stricte du taux de requ√™tes pour s√©curit√©
    [Route("api/[controller]")]           // Route de base : /api/Auth
    [ApiController]                       // Indique que c'est un contr√¥leur API avec validation automatique
    public class AuthController : ControllerBase
    {
        // ===== SERVICES INJECT√âS PAR D√âPENDANCE =====
        
        /// <summary>
        /// Gestionnaire des utilisateurs fourni par ASP.NET Core Identity
        /// Permet de cr√©er, modifier, supprimer des utilisateurs et g√©rer leurs mots de passe
        /// </summary>
        private readonly UserManager<ApplicationUser> _userManager;

        /// <summary>
        /// Gestionnaire de connexion fourni par ASP.NET Core Identity
        /// G√®re les op√©rations de connexion/d√©connexion des utilisateurs
        /// </summary>
        private readonly SignInManager<ApplicationUser> _signInManager;

        /// <summary>
        /// Gestionnaire des r√¥les fourni par ASP.NET Core Identity
        /// Permet de cr√©er et g√©rer les r√¥les (Admin, User, etc.)
        /// </summary>
        private readonly RoleManager<IdentityRole> _roleManager;

        /// <summary>
        /// Configuration de l'application (appsettings.json)
        /// Utilis√© pour r√©cup√©rer les cl√©s JWT, cha√Ænes de connexion, etc.
        /// </summary>
        private readonly IConfiguration _configuration;

        /// <summary>
        /// Contexte de base de donn√©es Entity Framework
        /// Permet d'acc√©der aux tables Users, Roles, UserRoles, etc.
        /// </summary>
        private readonly ApplicationDbContext _context;

        /// <summary>
        /// Service d'envoi d'emails pour les notifications par email
        /// Utilis√© pour envoyer des emails de bienvenue, notifications, etc.
        /// </summary>
        private readonly EmailService _emailService;
        
        /// <summary>
        /// ‚úÖ SERVICE DE LOGGING SERILOG - LOGS TECHNIQUES SEULEMENT
        /// Utilis√© pour :
        /// - Erreurs techniques (exceptions, probl√®mes syst√®me)
        /// - Probl√®mes de performance 
        /// - Erreurs de configuration
        /// - Debug technique
        /// 
        /// PAS utilis√© pour :
        /// - Audit utilisateur (qui se connecte, quand, etc.)
        /// - Tra√ßabilit√© m√©tier
        /// - Logs de s√©curit√©/conformit√©
        /// </summary>
        private readonly ILogger<AuthController> _logger;
        
        /// <summary>
        /// ‚úÖ SERVICE D'AUDIT - LOGS M√âTIER ET TRA√áABILIT√â
        /// Utilis√© pour :
        /// - Tra√ßabilit√© des connexions/d√©connexions
        /// - Audit des inscriptions d'utilisateurs
        /// - Historique des modifications de profil
        /// - Conformit√© r√©glementaire (RGPD, audit de s√©curit√©)
        /// - Analyse des patterns d'utilisation
        /// </summary>
        private readonly AuditLogger _auditLogger;

        // ===== CONSTRUCTEUR AVEC INJECTION DE D√âPENDANCES =====

        /// <summary>
        /// Constructeur du contr√¥leur avec injection de d√©pendances
        /// Tous les services n√©cessaires sont inject√©s automatiquement par ASP.NET Core
        /// </summary>
        /// <param name="userManager">Gestionnaire des utilisateurs Identity</param>
        /// <param name="signInManager">Gestionnaire de connexion Identity</param>
        /// <param name="roleManager">Gestionnaire des r√¥les Identity</param>
        /// <param name="configuration">Configuration de l'application</param>
        /// <param name="context">Contexte de base de donn√©es</param>
        /// <param name="emailService">Service d'envoi d'emails</param>
        /// <param name="logger">‚úÖ Service de logging pour aspects techniques</param>
        /// <param name="auditLogger">‚úÖ Service d'audit pour tra√ßabilit√© m√©tier</param>
        public AuthController(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            RoleManager<IdentityRole> roleManager,
            IConfiguration configuration,
            ApplicationDbContext context,
            EmailService emailService,
            ILogger<AuthController> logger,
            AuditLogger auditLogger
            )  
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _roleManager = roleManager;
            _configuration = configuration;
            _context = context;
            _emailService = emailService;
            _logger = logger;               // ‚úÖ Service de logging technique
            _auditLogger = auditLogger;     // ‚úÖ Service d'audit m√©tier
        }

        // ===== M√âTHODES D'AUTHENTIFICATION =====

        /// <summary>
        /// INSCRIPTION D'UN NOUVEL UTILISATEUR
        /// Logs techniques : erreurs de cr√©ation, probl√®mes de r√¥les
        /// </summary>
        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterModel model)
        {
            try
            {
                // Cr√©ation d'un nouvel utilisateur bas√© sur les donn√©es fournies
                var user = new ApplicationUser
                {
                    UserName = model.Email,
                    Email = model.Email,
                    FullName = model.FullName,
                    Description = model.Description
                };

                // Cr√©ation de l'utilisateur avec le mot de passe fourni
                var result = await _userManager.CreateAsync(user, model.Password);

                if (result.Succeeded)
                {
                    // Si le r√¥le "User" n'existe pas, on le cr√©e
                    if (!await _roleManager.RoleExistsAsync("User"))
                    {
                        await _roleManager.CreateAsync(new IdentityRole("User"));
                        // ‚úÖ LOG TECHNIQUE : Cr√©ation de r√¥le manquant (probl√®me de configuration)
                        _logger.LogWarning("üîß Had to create missing 'User' role during registration - check initial setup");
                    }

                    // On assigne le r√¥le "User" au nouvel utilisateur
                    await _userManager.AddToRoleAsync(user, "User");

                    await _auditLogger.LogAsync(AuditActions.REGISTER,
                            $"Nouvel utilisateur enregistr√©: {user.Email}");

                    // ‚úÖ NOUVEAU : Envoi de l'email de bienvenue
                    try
                    {
                        var welcomeSubject = "üéâ Bienvenue dans votre Biblioth√®que Num√©rique !";
                        var welcomeContent = $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <style>
        body {{ 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
        }}
        .email-container {{ 
            max-width: 600px; 
            margin: 0 auto; 
            background-color: white; 
            border-radius: 15px; 
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }}
        .header {{ 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; 
            text-align: center; 
            padding: 40px 20px;
        }}
        .header h1 {{ 
            margin: 0; 
            font-size: 28px; 
            font-weight: 300;
        }}
        .content {{ 
            padding: 40px 30px;
        }}
        .welcome-message {{ 
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 25px; 
            border-radius: 10px; 
            margin: 20px 0; 
            text-align: center;
        }}
        .features {{ 
            background-color: #f8f9fa; 
            padding: 25px; 
            border-radius: 10px; 
            margin: 25px 0;
            border-left: 5px solid #667eea;
        }}
        .feature-item {{ 
            margin: 15px 0; 
            display: flex; 
            align-items: center;
        }}
        .feature-icon {{ 
            width: 30px; 
            height: 30px; 
            background: #667eea; 
            border-radius: 50%; 
            display: inline-flex; 
            align-items: center; 
            justify-content: center; 
            margin-right: 15px;
            color: white;
            font-weight: bold;
        }}
        .cta-button {{ 
            display: inline-block; 
            padding: 15px 30px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; 
            text-decoration: none; 
            border-radius: 25px; 
            font-weight: bold;
            text-align: center;
            margin: 20px 0;
            transition: transform 0.3s ease;
        }}
        .cta-button:hover {{ 
            transform: translateY(-2px);
        }}
        .footer {{ 
            text-align: center; 
            color: #666; 
            font-size: 14px; 
            padding: 30px;
            background-color: #f8f9fa;
            border-top: 1px solid #eee;
        }}
        .user-info {{ 
            background-color: #e3f2fd; 
            padding: 20px; 
            border-radius: 8px; 
            margin: 20px 0;
            border: 1px solid #bbdefb;
        }}
        .highlight {{ 
            color: #667eea; 
            font-weight: bold; 
        }}
        .stats {{ 
            display: flex; 
            justify-content: space-around; 
            margin: 25px 0;
            text-align: center;
        }}
        .stat-item {{ 
            flex: 1; 
            padding: 15px;
        }}
        .stat-number {{ 
            font-size: 24px; 
            font-weight: bold; 
            color: #667eea;
        }}
        .stat-label {{ 
            font-size: 12px; 
            color: #666; 
            text-transform: uppercase;
        }}
    </style>
</head>
<body>
    <div class='email-container'>
        <div class='header'>
            <h1>üìö Biblioth√®que Num√©rique</h1>
            <p style='margin: 10px 0 0 0; opacity: 0.9;'>Votre nouvelle aventure litt√©raire commence ici !</p>
        </div>
        
        <div class='content'>
            <h2>Bonjour <span class='highlight'>{user.FullName}</span> ! üëã</h2>
            
            <div class='welcome-message'>
                <h3 style='margin: 0 0 10px 0;'>üéâ F√©licitations !</h3>
                <p style='margin: 0; font-size: 16px;'>Votre compte a √©t√© cr√©√© avec succ√®s. Vous faites maintenant partie de notre communaut√© de lecteurs passionn√©s !</p>
            </div>

            <div class='user-info'>
                <h4 style='margin-top: 0; color: #1976d2;'>üìã Informations de votre compte :</h4>
                <p><strong>Email :</strong> {user.Email}</p>
                <p><strong>Nom complet :</strong> {user.FullName}</p>
                <p><strong>Date d'inscription :</strong> {DateTime.Now:dd/MM/yyyy √† HH:mm}</p>
                {(!string.IsNullOrEmpty(user.Description) ? $"<p><strong>Description :</strong> {user.Description}</p>" : "")}
            </div>

            <div class='features'>
                <h4 style='margin-top: 0; color: #333;'>üöÄ D√©couvrez ce que vous pouvez faire :</h4>
                
                <div class='feature-item'>
                    <div class='feature-icon'>üìñ</div>
                    <div>
                        <strong>Parcourir la biblioth√®que</strong><br>
                        <small>Explorez notre collection de livres et magazines num√©riques</small>
                    </div>
                </div>
                
                <div class='feature-item'>
                    <div class='feature-icon'>‚¨áÔ∏è</div>
                    <div>
                        <strong>T√©l√©charger vos lectures</strong><br>
                        <small>Acc√©dez √† vos livres pr√©f√©r√©s hors ligne</small>
                    </div>
                </div>
                
                <div class='feature-item'>
                    <div class='feature-icon'>‚ù§Ô∏è</div>
                    <div>
                        <strong>Cr√©er votre liste de favoris</strong><br>
                        <small>Sauvegardez vos lectures coup de c≈ìur</small>
                    </div>
                </div>
                
                <div class='feature-item'>
                    <div class='feature-icon'>‚≠ê</div>
                    <div>
                        <strong>Noter et commenter</strong><br>
                        <small>Partagez vos avis avec la communaut√©</small>
                    </div>
                </div>
                
                <div class='feature-item'>
                    <div class='feature-icon'>üìä</div>
                    <div>
                        <strong>Suivre votre historique</strong><br>
                        <small>Retrouvez facilement vos lectures pass√©es</small>
                    </div>
                </div>
            </div>

            <div class='stats'>
                <div class='stat-item'>
                    <div class='stat-number'>1000+</div>
                    <div class='stat-label'>Livres disponibles</div>
                </div>
                <div class='stat-item'>
                    <div class='stat-number'>500+</div>
                    <div class='stat-label'>Magazines</div>
                </div>
                <div class='stat-item'>
                    <div class='stat-number'>24/7</div>
                    <div class='stat-label'>Acc√®s libre</div>
                </div>
            </div>

            <div style='text-align: center; margin: 30px 0;'>
                <a href='#' class='cta-button'>üöÄ Commencer √† explorer</a>
            </div>

            <div style='background-color: #fff3e0; padding: 20px; border-radius: 8px; border-left: 4px solid #ff9800; margin: 25px 0;'>
                <h4 style='margin-top: 0; color: #ef6c00;'>üí° Conseil pour bien commencer :</h4>
                <p style='margin-bottom: 0;'>Compl√©tez votre profil et ajoutez une photo pour personnaliser votre exp√©rience. Vous pouvez √©galement parcourir nos cat√©gories populaires pour d√©couvrir de nouveaux genres !</p>
            </div>

            <div style='background-color: #f3e5f5; padding: 20px; border-radius: 8px; border-left: 4px solid #9c27b0; margin: 25px 0;'>
                <h4 style='margin-top: 0; color: #7b1fa2;'>üîê S√©curit√© de votre compte :</h4>
                <p style='margin-bottom: 0;'>Gardez vos identifiants en s√©curit√© et n'h√©sitez pas √† nous contacter si vous remarquez une activit√© suspecte sur votre compte.</p>
            </div>
        </div>
        
        <div class='footer'>
            <p><strong>Merci de nous avoir rejoints ! üôè</strong></p>
            <p>L'√©quipe de la Biblioth√®que Num√©rique</p>
            <hr style='margin: 20px 0; border: none; border-top: 1px solid #eee;'>
            <p style='font-size: 12px; color: #999;'>
                üìß Ceci est un email automatique de bienvenue<br>
                üìÖ Envoy√© le {DateTime.Now:dd/MM/yyyy √† HH:mm:ss}<br>
                üåê LibraryAPI - Votre biblioth√®que num√©rique personnelle
            </p>
        </div>
    </div>
</body>
</html>";

                        // Envoi de l'email de bienvenue
                        await _emailService.SendEmailAsync(user.Email, welcomeSubject, welcomeContent);

                        // ‚úÖ LOG TECHNIQUE : Succ√®s d'envoi de l'email de bienvenue
                        _logger.LogInformation("‚úÖ Welcome email sent successfully to new user {UserEmail} ({UserId})",
                                              user.Email, user.Id);
                    }
                    catch (Exception emailEx)
                    {
                        // ‚úÖ LOG TECHNIQUE : Erreur d'envoi d'email de bienvenue (non bloquante)
                        _logger.LogWarning(emailEx, "‚ö†Ô∏è Failed to send welcome email to new user {UserEmail} ({UserId})",
                                          user.Email, user.Id);
                        // L'inscription continue m√™me si l'email √©choue
                    }

                    return Ok(new
                    {
                        Message = "User registered successfully!",
                        UserId = user.Id,
                        Email = user.Email,
                        FullName = user.FullName
                    });
                }

                // ‚úÖ LOG TECHNIQUE : Erreurs de validation Identity (probl√®me technique)
                _logger.LogWarning("‚ö†Ô∏è User registration failed due to Identity validation errors: {Errors}",
                                  string.Join(", ", result.Errors.Select(e => e.Description)));

                return BadRequest(result.Errors);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Exception non g√©r√©e (probl√®me syst√®me)
                _logger.LogError(ex, "‚ùå Technical error during user registration");
                return StatusCode(500, "An internal error occurred during registration");
            }
        }

        /// <summary>
        /// CONNEXION D'UN UTILISATEUR
        /// Logs techniques : erreurs de g√©n√©ration JWT, probl√®mes de configuration
        /// </summary>
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginModel model)
        {
            try
            {
                // Tentative de connexion avec le mot de passe fourni
                var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, false, false);

                if (result.Succeeded)
                {   
                    // Si la connexion r√©ussit, r√©cup√©rer l'utilisateur et ses r√¥les
                    var user = await _userManager.FindByEmailAsync(model.Email);

                    // V√©rifier si l'utilisateur est nul
                    if (user == null)
                    {
                        // ‚úÖ LOG TECHNIQUE : √âtat incoh√©rent (probl√®me syst√®me grave)
                        _logger.LogError("üö® Critical system inconsistency: PasswordSignIn succeeded but FindByEmail failed for {Email}", 
                                        model.Email);
                        return Unauthorized();
                    }

                    var roles = await _userManager.GetRolesAsync(user); 

                    // G√©n√©rer un token JWT pour l'utilisateur
                    var token = GenerateJwtToken(user, roles);

                    await _auditLogger.LogAsync(AuditActions.LOGIN_SUCCESS,
                            $"Connexion r√©ussie pour l'utilisateur: {user.Email}");

                    return Ok(new { Token = token });
                }

                // Pas de log technique pour √©chec de connexion normale (c'est m√©tier, pas technique)
                await _auditLogger.LogAsync(AuditActions.LOGIN_FAILED,
                    $"Tentative de connexion √©chou√©e pour: {model.Email}");

                return Unauthorized();
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Exception non g√©r√©e (probl√®me syst√®me)
                _logger.LogError(ex, "‚ùå Technical error during login process");
                return StatusCode(500, "An internal error occurred during login");
            }
        }

        /// <summary>
        /// D√âCONNEXION D'UN UTILISATEUR
        /// Logs techniques : erreurs de SignOut
        /// </summary>
        [HttpPost("logout")]
        [Authorize]
        public async Task<IActionResult> Logout()
        {
            try
            {
                // D√©connexion de l'utilisateur
                await _signInManager.SignOutAsync();

                await _auditLogger.LogAsync(AuditActions.LOGOUT,
                        $"D√©connexion de l'utilisateur");

                return Ok(new { Message = "Logged out successfully!" });
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur technique lors de la d√©connexion
                _logger.LogError(ex, "‚ùå Technical error during logout process");
                return StatusCode(500, "An internal error occurred during logout");
            }
        }

        // ===== GESTION DU PROFIL UTILISATEUR =====
        
        /// <summary>
        /// MISE √Ä JOUR DU PROFIL UTILISATEUR
        /// Logs techniques : erreurs d'upload, probl√®mes filesystem, erreurs BDD
        /// </summary>
        [HttpPut("update-profile")]
        [Authorize]
        public async Task<IActionResult> UpdateProfile([FromForm] UpdateProfileModel model)
        {
            try
            {
                var user = await _userManager.GetUserAsync(User);
                if (user == null) 
                {
                    // ‚úÖ LOG TECHNIQUE : Token valide mais utilisateur introuvable (probl√®me syst√®me)
                    _logger.LogError("üö® Valid JWT token but user not found in database - potential data inconsistency");
                    return NotFound();
                }

                // Mise √† jour du nom et de la description
                if (!string.IsNullOrEmpty(model.FullName))
                {
                    user.FullName = model.FullName;
                }

                if (!string.IsNullOrEmpty(model.Description))
                {
                    user.Description = model.Description;
                }

                // Gestion du fichier d'image de profil
                if (model.ProfilePicture != null && model.ProfilePicture.Length > 0)
                {
                    try
                    {
                        // Cr√©ation du dossier de destination s'il n'existe pas
                        var uploadsFolder = Path.Combine("wwwroot", "images", "profiles");
                        if (!Directory.Exists(uploadsFolder))
                        {
                            Directory.CreateDirectory(uploadsFolder);
                            // ‚úÖ LOG TECHNIQUE : Cr√©ation de dossier manquant (probl√®me de setup)
                            _logger.LogWarning("üìÅ Had to create missing uploads directory: {Path} - check deployment setup", 
                                              uploadsFolder);
                        }

                        // G√©n√©ration d'un nom de fichier unique avec l'ID utilisateur
                        var fileName = $"{user.Id}_{DateTime.UtcNow:yyyyMMdd_HHmmss}_{model.ProfilePicture.FileName}";
                        var imagePath = Path.Combine(uploadsFolder, fileName);
                        
                        // Sauvegarde du fichier sur le serveur
                        using (var stream = new FileStream(imagePath, FileMode.Create))
                        {
                            await model.ProfilePicture.CopyToAsync(stream);
                        }

                        // Suppression de l'ancienne image (si elle existe)
                        // if (!string.IsNullOrEmpty(user.ProfilePicture))
                        // {
                        //     var oldImagePath = Path.Combine("wwwroot", user.ProfilePicture.TrimStart('/'));
                        //     if (File.Exists(oldImagePath))
                        //     {
                        //         File.Delete(oldImagePath);
                        //     }
                        // }

                        // Stockage du chemin relatif dans la base de donn√©es
                        user.ProfilePicture = $"/images/profiles/{fileName}";
                    }
                    catch (UnauthorizedAccessException ex)
                    {
                        // ‚úÖ LOG TECHNIQUE : Probl√®me de permissions filesystem
                        _logger.LogError(ex, "‚ùå File system permission error during profile picture upload");
                        return BadRequest(new { Message = "Server configuration error - cannot save files" });
                    }
                    catch (DirectoryNotFoundException ex)
                    {
                        // ‚úÖ LOG TECHNIQUE : Probl√®me de structure de dossiers
                        _logger.LogError(ex, "‚ùå Directory structure error during profile picture upload");
                        return BadRequest(new { Message = "Server configuration error - missing directories" });
                    }
                    catch (IOException ex)
                    {
                        // ‚úÖ LOG TECHNIQUE : Probl√®me I/O (disque plein, etc.)
                        _logger.LogError(ex, "‚ùå I/O error during profile picture upload");
                        return BadRequest(new { Message = "Server error - cannot save file" });
                    }
                }

                // Sauvegarde des modifications dans la base de donn√©es
                var result = await _userManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    await _auditLogger.LogAsync(AuditActions.PROFILE_UPDATED,
                            $"Profil mis √† jour pour l'utilisateur: {user.Email}");

                    return Ok(new
                    {
                        Message = "Profile updated successfully!",
                        ProfilePictureUrl = user.ProfilePicture
                    });
                }

                // ‚úÖ LOG TECHNIQUE : Erreurs de validation Identity
                _logger.LogWarning("‚ö†Ô∏è User profile update failed due to Identity validation errors: {Errors}",
                                  string.Join(", ", result.Errors.Select(e => e.Description)));

                return BadRequest(result.Errors);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Exception non g√©r√©e
                _logger.LogError(ex, "‚ùå Technical error during profile update");
                return StatusCode(500, "An internal error occurred during profile update");
            }
        }

        // ===== M√âTHODES ADMINISTRATIVES =====
        
        /// <summary>
        /// R√âCUP√âRATION DE TOUS LES UTILISATEURS
        /// Logs techniques : erreurs de base de donn√©es, probl√®mes de performance
        /// </summary>
        [HttpGet("users")]
        [Authorize(Roles = "Admin")]
        public IActionResult GetUsers()
        {
            try
            {
                // V√©rification que les tables de r√¥les sont correctement configur√©es
                if (_context.UserRoles == null || _context.Roles == null)
                {
                    // ‚úÖ LOG TECHNIQUE : Probl√®me de configuration de base de donn√©es
                    _logger.LogError("üö® Database context configuration error: UserRoles or Roles is null");
                    return StatusCode(StatusCodes.Status500InternalServerError, 
                        "Database configuration error");
                }

                // Requ√™te pour r√©cup√©rer tous les utilisateurs avec leurs r√¥les
                var users = _context.Users
                    .Select(u => new UserDto
                    {
                        Id = u.Id,
                        UserName = u.UserName!,
                        Email = u.Email!,
                        Role = _context.UserRoles!
                                .Where(ur => ur.UserId == u.Id)
                                .Join(_context.Roles,
                                    ur => ur.RoleId,
                                    role => role.Id,
                                    (ur, role) => role.Name)
                                .FirstOrDefault()
                    })
                    .ToList();

                return Ok(users);
            }
            catch (InvalidOperationException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur de requ√™te LINQ/EF
                _logger.LogError(ex, "‚ùå Database query error while retrieving users list");
                return StatusCode(500, "Database query error");
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur g√©n√©rique
                _logger.LogError(ex, "‚ùå Technical error while retrieving users list");
                return StatusCode(500, "An internal error occurred");
            }
        }

        [HttpGet("users/{id}")]
        [Authorize(Roles = "Admin")]
        public IActionResult GetUserById(string id)
        {
            try
            {
                // Recherche de l'utilisateur par ID avec son r√¥le
                var user = _context.Users
                    .Where(u => u.Id == id)
                    .Select(u => new UserDto
                    {
                        Id = u.Id,
                        UserName = u.UserName!,
                        Email = u.Email!,
                        Role = _context.UserRoles
                                .Where(ur => ur.UserId == u.Id)
                                .Join(_context.Roles,
                                    ur => ur.RoleId,
                                    role => role.Id,
                                    (ur, role) => role.Name)
                                .FirstOrDefault()
                    })
                    .FirstOrDefault();

                if (user == null)
                {
                    return NotFound($"User with id {id} not found.");
                }

                return Ok(user);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur lors de la r√©cup√©ration
                _logger.LogError(ex, "‚ùå Technical error while retrieving user {UserId}", id);
                return StatusCode(500, "An internal error occurred");
            }
        }

        [HttpGet("users/role/{roleName}")]
        [Authorize(Roles = "Admin")]
        public IActionResult GetUsersByRole(string roleName)
        {
            try
            {
                // R√©cup√©rer le r√¥le correspondant
                var role = _context.Roles.FirstOrDefault(r => r.Name == roleName);

                // V√©rifier si le r√¥le existe
                if (role == null)
                {
                    return NotFound($"Role '{roleName}' not found.");
                }

                var users = _context.Users
                    .Where(u => _context.UserRoles
                        .Any(ur => ur.UserId == u.Id && ur.RoleId == role.Id))
                    .Select(u => new UserDto
                    {
                        Id = u.Id,
                        UserName = u.UserName!,
                        Email = u.Email!,
                        Role = roleName
                    })
                    .ToList();

                return Ok(users);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur lors de la recherche par r√¥le
                _logger.LogError(ex, "‚ùå Technical error while retrieving users by role {RoleName}", roleName);
                return StatusCode(500, "An internal error occurred");
            }
        }

        [HttpGet("users/search")]
        [Authorize(Roles = "Admin")]
        public IActionResult SearchUsers([FromQuery] string query)
        {
            // Validation du terme de recherche
            if (string.IsNullOrWhiteSpace(query))
            {
                return BadRequest("Search query cannot be empty");
            }

            try
            {
                // Recherche dans les noms d'utilisateur et emails
                var users = _context.Users
                    .Where(u => u.UserName!.Contains(query) || u.Email!.Contains(query))
                    .Select(u => new UserDto
                    {
                        Id = u.Id,
                        UserName = u.UserName!,
                        Email = u.Email!,
                        Role = _context.UserRoles
                                .Where(ur => ur.UserId == u.Id)
                                .Join(_context.Roles,
                                    ur => ur.RoleId,
                                    role => role.Id,
                                    (ur, role) => role.Name)
                                .FirstOrDefault()
                    })
                    .ToList();

                return Ok(users);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur lors de la recherche
                _logger.LogError(ex, "‚ùå Technical error during user search with query '{Query}'", query);
                return StatusCode(500, "An internal error occurred during search");
            }
        }

        [HttpGet("users/{id}/notifications")]
        [Authorize]
        public IActionResult GetUserNotifications(string id)
        {
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var isAdmin = User.IsInRole("Admin");
            
            // V√©rification des droits d'acc√®s
            if (currentUserId != id && !isAdmin)
            {
                return Forbid("You can only access your own notifications");
            }

            try
            {
                // R√©cup√©ration des notifications de l'utilisateur
                var notifications = _context.UserNotifications
                    .Where(un => un.UserId == id)
                    .Include(un => un.Notification)  // Chargement des d√©tails de notification
                    .Select(un => new 
                    {
                        NotificationId = un.NotificationId,
                        Content = un.Notification != null ? un.Notification.Content : "No content available",
                        IsRead = un.Notification != null && un.Notification.IsRead,
                        CreatedAt = un.Notification != null ? un.Notification.CreatedAt : DateTime.MinValue
                    })
                    .OrderByDescending(n => n.CreatedAt)  // Plus r√©centes en premier
                    .ToList();

                return Ok(notifications);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur lors de la r√©cup√©ration des notifications
                _logger.LogError(ex, "‚ùå Technical error while retrieving notifications for user {UserId}", id);
                return StatusCode(500, "An internal error occurred while retrieving notifications");
            }
        }

        // ===== M√âTHODE PRIV√âE DE G√âN√âRATION JWT =====
        
        /// <summary>
        /// G√âN√âRATION D'UN TOKEN JWT
        /// Logs techniques : erreurs de configuration, probl√®mes de signature
        /// </summary>
        private string GenerateJwtToken(ApplicationUser user, IList<string> roles)
        {
            try
            {
                // Cr√©ation des claims (informations incluses dans le token)
                var claims = new List<Claim>
                {
                    new Claim(JwtRegisteredClaimNames.Sub, user.Id),
                    new Claim(JwtRegisteredClaimNames.Email, user.Email!),
                    new Claim(ClaimTypes.Name, user.UserName!),
                    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
                };

                // Ajout des r√¥les en tant que claims
                claims.AddRange(roles.Select(role => new Claim(ClaimTypes.Role, role)));

                // R√©cup√©ration de la cl√© secr√®te depuis la configuration
                var jwtKey = _configuration["Jwt:Key"];
                if (string.IsNullOrEmpty(jwtKey))
                {
                    // ‚úÖ LOG TECHNIQUE : Probl√®me de configuration critique
                    _logger.LogError("üö® JWT Key is not configured in appsettings - authentication will fail");
                    throw new InvalidOperationException("JWT Key is not configured.");
                }

                // V√©rification des autres param√®tres JWT
                var issuer = _configuration["Jwt:Issuer"];
                var audience = _configuration["Jwt:Audience"];
                
                if (string.IsNullOrEmpty(issuer) || string.IsNullOrEmpty(audience))
                {
                    // ‚úÖ LOG TECHNIQUE : Configuration JWT incompl√®te
                    _logger.LogError("üö® JWT Issuer or Audience not configured - tokens may be invalid");
                }

                // Cr√©ation de la cl√© de signature sym√©trique
                var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey));
                var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

                var expiryHours = _configuration.GetValue<int>("Jwt:ExpiryHours", 3); // 3h par d√©faut



                // Cr√©ation du token JWT
                var token = new JwtSecurityToken(
                    issuer: issuer,
                    audience: audience,
                    claims: claims,
                    //expires: DateTime.UtcNow.AddHours(3),
                    expires: DateTime.UtcNow.AddHours(expiryHours),
                    signingCredentials: creds
                );

                return new JwtSecurityTokenHandler().WriteToken(token);
            }
            catch (ArgumentException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Probl√®me avec les param√®tres du token
                _logger.LogError(ex, "‚ùå Invalid arguments during JWT token generation");
                throw;
            }
            catch (SecurityTokenException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur de s√©curit√© lors de la cr√©ation du token
                _logger.LogError(ex, "‚ùå Security error during JWT token generation");
                throw;
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur g√©n√©rale
                _logger.LogError(ex, "‚ùå Unexpected error during JWT token generation");
                throw;
            }
        }
    }
}

/* M√âTHODES √Ä ENVISAGER POUR COMPL√âTER LE CONTR√îLEUR :
        
        R√©cup√©rer la liste des utilisateurs :
        Dans une m√©thode pour r√©cup√©rer tous les utilisateurs (par exemple, GetAllUsers() ou GetUsers()), 
        UserDto est pratique pour filtrer et structurer les informations utilisateur avant de les renvoyer au client.

        R√©cup√©rer les informations d'un utilisateur sp√©cifique :
        Une m√©thode comme GetUserById() ou GetUserProfile() pourrait utiliser UserDto pour fournir des 
        informations d√©taill√©es sur un utilisateur sp√©cifique sans exposer d'informations sensibles.

        Filtrer les utilisateurs par r√¥les :
        Si vous avez une m√©thode comme GetUsersByRole(string roleName) pour r√©cup√©rer uniquement les 
        utilisateurs ayant un r√¥le sp√©cifique, UserDto serait id√©al pour structurer la r√©ponse sans 
        exposer l'int√©gralit√© des entit√©s ApplicationUser.

        Rechercher des utilisateurs par crit√®res :
        Une m√©thode SearchUsers(string query) pourrait utiliser UserDto pour renvoyer des informations 
        utilisateur en r√©ponse √† des crit√®res de recherche, limitant les donn√©es renvoy√©es au strict n√©cessaire.

        Afficher l'activit√© d'un utilisateur :
        Dans des m√©thodes pour afficher les activit√©s des utilisateurs, comme l'historique des favoris 
        ou les statistiques d'utilisation, UserDto permet d'inclure seulement les informations essentielles 
        d'un utilisateur.

        Notifications ou activit√© r√©cente :
        Dans des m√©thodes pour afficher les notifications d'un utilisateur ou l'activit√© r√©cente, UserDto 
        est utile pour structurer les informations utilisateur dans la r√©ponse de mani√®re s√©curis√©e.
        */


        /*
        ===== FONCTIONNALIT√âS SUPPL√âMENTAIRES √Ä D√âVELOPPER =====
        
        Les commentaires ci-dessous d√©crivent des fonctionnalit√©s additionnelles
        qui pourraient √™tre impl√©ment√©es dans ce contr√¥leur d'authentification :

        üìã GESTION AVANC√âE DES COMPTES UTILISATEUR :
        - D√©sactivation/r√©activation temporaire de comptes utilisateur
        - Syst√®me de r√©initialisation de mot de passe par email s√©curis√©
        - Changement de r√¥le d'un utilisateur (promotion/r√©trogradation)
        - Suppression d√©finitive d'un compte utilisateur avec confirmation
        - Statistiques d√©taill√©es d'utilisation par utilisateur

        üîê RENFORCEMENT DE LA S√âCURIT√â :
        - Authentification √† deux facteurs (2FA) avec QR codes
        - Historique d√©taill√© des connexions et g√©olocalisation
        - Verrouillage automatique de compte apr√®s X tentatives √©chou√©es
        - Syst√®me de d√©tection d'activit√© suspecte et alertes
        - Liste noire de tokens JWT pour invalidation forc√©e

        üìä ANALYTICS ET SURVEILLANCE :
        - Tableau de bord des statistiques de connexion
        - Identification des utilisateurs les plus actifs
        - Analyse des tendances d'inscription et saisonnalit√©
        - Surveillance en temps r√©el des erreurs d'authentification
        - G√©n√©ration de rapports d'activit√© administrative

        üì¨ SYST√àME DE NOTIFICATIONS AVANC√â :
        - Emails de bienvenue personnalis√©s avec templates
        - Notifications de s√©curit√© (nouvelle connexion, changement de mot de passe)
        - Alertes automatiques d'activit√© suspecte
        - Syst√®me de newsletters et communications cibl√©es

        üé® PERSONNALISATION DE L'EXP√âRIENCE :
        - Th√®mes personnalis√©s par utilisateur (clair/sombre)
        - Gestion des pr√©f√©rences de langue multilingue
        - Configuration d'affichage et mise en page
        - Param√®tres de confidentialit√© granulaires

        EXEMPLE D'IMPL√âMENTATION - R√©initialisation de mot de passe s√©curis√©e :
        
        [HttpPost("reset-password-request")]
        public async Task<IActionResult> RequestPasswordReset([FromBody] ResetPasswordRequestModel model)
        {
            _logger.LogInformation("üîÑ Demande de r√©initialisation de mot de passe pour: {Email}", model.Email);
            
            var user = await _userManager.FindByEmailAsync(model.Email);
            if (user == null)
            {
                _logger.LogWarning("‚ö†Ô∏è Tentative de r√©initialisation pour email inexistant: {Email}", model.Email);
                // Ne pas r√©v√©ler si l'email existe ou non (principe de s√©curit√©)
                return Ok(new { Message = "Si l'email existe, un lien de r√©initialisation a √©t√© envoy√©." });
            }

            // G√©n√©ration d'un token de r√©initialisation s√©curis√©
            var resetToken = await _userManager.GeneratePasswordResetTokenAsync(user);
            
            // Cr√©ation du lien de r√©initialisation avec expiration
            var resetLink = $"{Request.Scheme}://{Request.Host}/reset-password?token={resetToken}&email={user.Email}";
            
            // Envoi d'email s√©curis√© avec template HTML
            await _emailService.SendPasswordResetEmailAsync(user.Email, user.FullName, resetLink);
            
            _logger.LogInformation("üìß Email de r√©initialisation envoy√© √† l'utilisateur {UserId}", user.Id);
            await _auditLogger.LogAsync(AuditActions.PASSWORD_RESET_REQUESTED, 
                $"Demande de r√©initialisation de mot de passe pour: {user.Email}");
                
            return Ok(new { Message = "Email de r√©initialisation envoy√© avec succ√®s." });
        }

        [HttpPost("reset-password-confirm")]
        public async Task<IActionResult> ConfirmPasswordReset([FromBody] ResetPasswordConfirmModel model)
        {
            try
            {
                var user = await _userManager.FindByEmailAsync(model.Email);
                if (user == null)
                {
                    return BadRequest("Utilisateur introuvable.");
                }

                // R√©initialisation du mot de passe avec le token
                var result = await _userManager.ResetPasswordAsync(user, model.Token, model.NewPassword);
                
                if (result.Succeeded)
                {
                    await _auditLogger.LogAsync(AuditActions.PASSWORD_CHANGED,
                        $"Mot de passe r√©initialis√© avec succ√®s pour: {user.Email}");
                    
                    // Envoi d'email de confirmation
                    await _emailService.SendPasswordChangedConfirmationAsync(user.Email, user.FullName);
                    
                    return Ok(new { Message = "Mot de passe r√©initialis√© avec succ√®s." });
                }

                return BadRequest(result.Errors);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erreur technique lors de la confirmation de r√©initialisation");
                return StatusCode(500, "Erreur interne lors de la r√©initialisation du mot de passe");
            }
        }
        */

/*
===== SYST√àME DE LOGGING DUAL IMPL√âMENT√â =====

‚úÖ LOGS TECHNIQUES (Serilog) - Diagnostic et maintenance :
- Erreurs d'exception non g√©r√©es et stack traces
- Probl√®mes de configuration (cl√©s JWT manquantes, r√¥les non cr√©√©s)
- Erreurs de base de donn√©es et probl√®mes de connexion
- Probl√®mes filesystem (permissions, dossiers manquants, uploads)
- Erreurs de permissions et d'acc√®s aux ressources
- Incoh√©rences syst√®me critiques et √©tats invalides
- Probl√®mes de performance et timeouts

‚úÖ LOGS D'AUDIT (Base de donn√©es) - Tra√ßabilit√© et conformit√© :
- Connexions et d√©connexions d'utilisateurs
- Inscriptions de nouveaux comptes
- Modifications de profils utilisateur
- Actions administratives (changements de r√¥les, etc.)
- Conformit√© r√©glementaire (RGPD, audit de s√©curit√©)

===== EXEMPLES DE LOGS TECHNIQUES G√âN√âR√âS =====

[15:30:16 WRN] üîß R√¥le 'User' manquant cr√©√© lors de l'inscription - v√©rifier la configuration initiale
[15:32:46 ERR] üö® Incoh√©rence syst√®me critique: PasswordSignIn r√©ussi mais FindByEmail √©chou√© pour user@exemple.com
[15:35:20 WRN] üìÅ Cr√©ation du dossier d'upload manquant: wwwroot/images/profiles - v√©rifier le d√©ploiement
[15:36:12 ERR] ‚ùå Erreur de permissions syst√®me lors de l'upload d'image de profil
[15:40:15 ERR] üö® Erreur de configuration du contexte BDD: UserRoles ou Roles est null
[15:45:30 ERR] üö® Cl√© JWT non configur√©e dans appsettings - l'authentification √©chouera
[15:50:22 INF] ‚úÖ Email de bienvenue envoy√© avec succ√®s au nouvel utilisateur john@exemple.com (ID: abc123)
[15:55:10 WRN] ‚ö†Ô∏è √âchec d'envoi de l'email de bienvenue au nouvel utilisateur marie@exemple.com (ID: def456)

CES LOGS PERMETTENT DE :
‚úÖ D√©tecter rapidement les probl√®mes de configuration
‚úÖ Identifier les erreurs syst√®me avant qu'elles n'affectent les utilisateurs
‚úÖ Surveiller les performances et la disponibilit√©
‚úÖ Diagnostiquer les pannes et r√©soudre les incidents
‚úÖ Assurer une maintenance technique proactive
‚úÖ Garantir la qualit√© de service

===== B√âN√âFICES DE CETTE ARCHITECTURE =====

üîß MAINTENANCE TECHNIQUE :
- D√©tection pr√©coce des probl√®mes syst√®me
- Diagnostic rapide des pannes et erreurs
- Surveillance de la sant√© de l'application
- Optimisation continue des performances

üìä CONFORMIT√â ET AUDIT :
- Tra√ßabilit√© compl√®te des actions utilisateur
- Respect des exigences r√©glementaires (RGPD)
- Audit de s√©curit√© et investigations
- Analyse des patterns d'utilisation

üí° AM√âLIORATION CONTINUE :
- Identification des points de friction utilisateur
- Optimisation de l'exp√©rience d'inscription
- Am√©lioration de la s√©curit√© bas√©e sur les donn√©es
- √âvolution guid√©e par les m√©triques d'usage

*/