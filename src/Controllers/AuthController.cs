using Microsoft.AspNetCore.Mvc;  // Pour g√©rer les contr√¥leurs et les actions d'API
using Microsoft.AspNetCore.Identity;  // Pour utiliser Identity (gestion des utilisateurs, r√¥les, etc.)
using Microsoft.AspNetCore.Authorization;  // Pour g√©rer les attributs d'autorisation
using System.IdentityModel.Tokens.Jwt;  // Pour manipuler les tokens JWT
using System.Security.Claims;  // Pour cr√©er et g√©rer les claims dans les tokens JWT
using Microsoft.IdentityModel.Tokens;  // Pour g√©rer la validation et la signature des tokens JWT
using System.Text;  // Pour encoder les cl√©s de s√©curit√©
using Microsoft.AspNetCore.Http;  // Pour utiliser IFormFile
using System.IO;  // Pour utiliser Path et FileStream
using Microsoft.EntityFrameworkCore;
using LibraryAPI.Data; // Pour utiliser la m√©thode Include
using LibraryAPI.Models;
using Microsoft.AspNetCore.RateLimiting;

namespace LibraryAPI.Controllers
{
    /// <summary>
    /// CONTR√îLEUR D'AUTHENTIFICATION ET GESTION DES UTILISATEURS
    /// 
    /// Ce contr√¥leur g√®re toutes les op√©rations li√©es aux utilisateurs :
    /// - Inscription (register)
    /// - Connexion (login) avec g√©n√©ration de tokens JWT
    /// - D√©connexion (logout)
    /// - Mise √† jour de profil avec upload d'images
    /// - Gestion administrative des utilisateurs (liste, recherche, etc.)
    /// - Notifications utilisateur
    /// 
    /// LOGS SERILOG (TECHNIQUES UNIQUEMENT) :
    /// - Erreurs techniques (exceptions, probl√®mes de BDD, etc.)
    /// - Probl√®mes de performance (op√©rations lentes)
    /// - Erreurs de configuration (cl√©s JWT manquantes, etc.)
    /// - Probl√®mes d'infrastructure (fichiers, dossiers, etc.)
    /// 
    /// NOTE : Les logs d'audit (qui fait quoi, quand) sont g√©r√©s s√©par√©ment
    /// </summary>
    [EnableRateLimiting("StrictPolicy")]  // Limitation stricte du taux de requ√™tes pour s√©curit√©
    [Route("api/[controller]")]           // Route de base : /api/Auth
    [ApiController]                       // Indique que c'est un contr√¥leur API avec validation automatique
    public class AuthController : ControllerBase
    {
        // ===== SERVICES INJECT√âS PAR D√âPENDANCE =====
        
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly RoleManager<IdentityRole> _roleManager;
        private readonly IConfiguration _configuration;
        private readonly ApplicationDbContext _context;
        
        /// <summary>
        /// ‚úÖ SERVICE DE LOGGING SERILOG - LOGS TECHNIQUES SEULEMENT
        /// Utilis√© pour :
        /// - Erreurs techniques (exceptions, probl√®mes syst√®me)
        /// - Probl√®mes de performance 
        /// - Erreurs de configuration
        /// - Debug technique
        /// 
        /// PAS utilis√© pour :
        /// - Audit utilisateur (qui se connecte, quand, etc.)
        /// - Tra√ßabilit√© m√©tier
        /// - Logs de s√©curit√©/conformit√©
        /// </summary>
        private readonly ILogger<AuthController> _logger;

        // ===== CONSTRUCTEUR AVEC INJECTION DE D√âPENDANCES =====
        
        public AuthController(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            RoleManager<IdentityRole> roleManager,
            IConfiguration configuration,
            ApplicationDbContext context,
            ILogger<AuthController> logger)  // ‚úÖ Logger pour aspects techniques seulement
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _roleManager = roleManager;
            _configuration = configuration;
            _context = context;
            _logger = logger;
        }

        // ===== M√âTHODES D'AUTHENTIFICATION =====
        
        /// <summary>
        /// INSCRIPTION D'UN NOUVEL UTILISATEUR
        /// Logs techniques : erreurs de cr√©ation, probl√®mes de r√¥les
        /// </summary>
        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterModel model)
        {
            try
            {
                // Cr√©ation d'un nouvel utilisateur bas√© sur les donn√©es fournies
                var user = new ApplicationUser
                {
                    UserName = model.Email,
                    Email = model.Email,
                    FullName = model.FullName,
                    Description = model.Description
                };

                // Cr√©ation de l'utilisateur avec le mot de passe fourni
                var result = await _userManager.CreateAsync(user, model.Password);
                
                if (result.Succeeded)
                {
                    // Si le r√¥le "User" n'existe pas, on le cr√©e
                    if (!await _roleManager.RoleExistsAsync("User"))
                    {
                        await _roleManager.CreateAsync(new IdentityRole("User"));
                        // ‚úÖ LOG TECHNIQUE : Cr√©ation de r√¥le manquant (probl√®me de configuration)
                        _logger.LogWarning("üîß Had to create missing 'User' role during registration - check initial setup");
                    }

                    // On assigne le r√¥le "User" au nouvel utilisateur
                    await _userManager.AddToRoleAsync(user, "User");

                    return Ok(new { Message = "User registered successfully!" });
                }

                // ‚úÖ LOG TECHNIQUE : Erreurs de validation Identity (probl√®me technique)
                _logger.LogWarning("‚ö†Ô∏è User registration failed due to Identity validation errors: {Errors}",
                                  string.Join(", ", result.Errors.Select(e => e.Description)));
                
                return BadRequest(result.Errors);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Exception non g√©r√©e (probl√®me syst√®me)
                _logger.LogError(ex, "‚ùå Technical error during user registration");
                return StatusCode(500, "An internal error occurred during registration");
            }
        }

        /// <summary>
        /// CONNEXION D'UN UTILISATEUR
        /// Logs techniques : erreurs de g√©n√©ration JWT, probl√®mes de configuration
        /// </summary>
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginModel model)
        {
            try
            {
                // Tentative de connexion avec le mot de passe fourni
                var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, false, false);

                if (result.Succeeded)
                {   
                    // Si la connexion r√©ussit, r√©cup√©rer l'utilisateur et ses r√¥les
                    var user = await _userManager.FindByEmailAsync(model.Email);

                    // V√©rifier si l'utilisateur est nul
                    if (user == null)
                    {
                        // ‚úÖ LOG TECHNIQUE : √âtat incoh√©rent (probl√®me syst√®me grave)
                        _logger.LogError("üö® Critical system inconsistency: PasswordSignIn succeeded but FindByEmail failed for {Email}", 
                                        model.Email);
                        return Unauthorized();
                    }

                    var roles = await _userManager.GetRolesAsync(user); 

                    // G√©n√©rer un token JWT pour l'utilisateur
                    var token = GenerateJwtToken(user, roles);
                    return Ok(new { Token = token });
                }

                // Pas de log technique pour √©chec de connexion normale (c'est m√©tier, pas technique)
                return Unauthorized();
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Exception non g√©r√©e (probl√®me syst√®me)
                _logger.LogError(ex, "‚ùå Technical error during login process");
                return StatusCode(500, "An internal error occurred during login");
            }
        }

        /// <summary>
        /// D√âCONNEXION D'UN UTILISATEUR
        /// Logs techniques : erreurs de SignOut
        /// </summary>
        [HttpPost("logout")]
        [Authorize]
        public async Task<IActionResult> Logout()
        {
            try
            {
                // D√©connexion de l'utilisateur
                await _signInManager.SignOutAsync();
                return Ok(new { Message = "Logged out successfully!" });
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur technique lors de la d√©connexion
                _logger.LogError(ex, "‚ùå Technical error during logout process");
                return StatusCode(500, "An internal error occurred during logout");
            }
        }

        // ===== GESTION DU PROFIL UTILISATEUR =====
        
        /// <summary>
        /// MISE √Ä JOUR DU PROFIL UTILISATEUR
        /// Logs techniques : erreurs d'upload, probl√®mes filesystem, erreurs BDD
        /// </summary>
        [HttpPut("update-profile")]
        [Authorize]
        public async Task<IActionResult> UpdateProfile([FromForm] UpdateProfileModel model)
        {
            try
            {
                var user = await _userManager.GetUserAsync(User);
                if (user == null) 
                {
                    // ‚úÖ LOG TECHNIQUE : Token valide mais utilisateur introuvable (probl√®me syst√®me)
                    _logger.LogError("üö® Valid JWT token but user not found in database - potential data inconsistency");
                    return NotFound();
                }

                // Mise √† jour du nom et de la description
                if (!string.IsNullOrEmpty(model.FullName))
                {
                    user.FullName = model.FullName;
                }

                if (!string.IsNullOrEmpty(model.Description))
                {
                    user.Description = model.Description;
                }

                // Gestion du fichier d'image de profil
                if (model.ProfilePicture != null && model.ProfilePicture.Length > 0)
                {
                    try
                    {
                        // Cr√©ation du dossier de destination s'il n'existe pas
                        var uploadsFolder = Path.Combine("wwwroot", "images", "profiles");
                        if (!Directory.Exists(uploadsFolder))
                        {
                            Directory.CreateDirectory(uploadsFolder);
                            // ‚úÖ LOG TECHNIQUE : Cr√©ation de dossier manquant (probl√®me de setup)
                            _logger.LogWarning("üìÅ Had to create missing uploads directory: {Path} - check deployment setup", 
                                              uploadsFolder);
                        }

                        // G√©n√©ration d'un nom de fichier unique avec l'ID utilisateur
                        var fileName = $"{user.Id}_{DateTime.UtcNow:yyyyMMdd_HHmmss}_{model.ProfilePicture.FileName}";
                        var imagePath = Path.Combine(uploadsFolder, fileName);
                        
                        // Sauvegarde du fichier sur le serveur
                        using (var stream = new FileStream(imagePath, FileMode.Create))
                        {
                            await model.ProfilePicture.CopyToAsync(stream);
                        }

                        // Suppression de l'ancienne image (si elle existe)
                        // if (!string.IsNullOrEmpty(user.ProfilePicture))
                        // {
                        //     var oldImagePath = Path.Combine("wwwroot", user.ProfilePicture.TrimStart('/'));
                        //     if (File.Exists(oldImagePath))
                        //     {
                        //         File.Delete(oldImagePath);
                        //     }
                        // }

                        // Stockage du chemin relatif dans la base de donn√©es
                        user.ProfilePicture = $"/images/profiles/{fileName}";
                    }
                    catch (UnauthorizedAccessException ex)
                    {
                        // ‚úÖ LOG TECHNIQUE : Probl√®me de permissions filesystem
                        _logger.LogError(ex, "‚ùå File system permission error during profile picture upload");
                        return BadRequest(new { Message = "Server configuration error - cannot save files" });
                    }
                    catch (DirectoryNotFoundException ex)
                    {
                        // ‚úÖ LOG TECHNIQUE : Probl√®me de structure de dossiers
                        _logger.LogError(ex, "‚ùå Directory structure error during profile picture upload");
                        return BadRequest(new { Message = "Server configuration error - missing directories" });
                    }
                    catch (IOException ex)
                    {
                        // ‚úÖ LOG TECHNIQUE : Probl√®me I/O (disque plein, etc.)
                        _logger.LogError(ex, "‚ùå I/O error during profile picture upload");
                        return BadRequest(new { Message = "Server error - cannot save file" });
                    }
                }

                // Sauvegarde des modifications dans la base de donn√©es
                var result = await _userManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    return Ok(new { 
                        Message = "Profile updated successfully!", 
                        ProfilePictureUrl = user.ProfilePicture 
                    });
                }

                // ‚úÖ LOG TECHNIQUE : Erreurs de validation Identity
                _logger.LogWarning("‚ö†Ô∏è User profile update failed due to Identity validation errors: {Errors}",
                                  string.Join(", ", result.Errors.Select(e => e.Description)));

                return BadRequest(result.Errors);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Exception non g√©r√©e
                _logger.LogError(ex, "‚ùå Technical error during profile update");
                return StatusCode(500, "An internal error occurred during profile update");
            }
        }

        // ===== M√âTHODES ADMINISTRATIVES =====
        
        /// <summary>
        /// R√âCUP√âRATION DE TOUS LES UTILISATEURS
        /// Logs techniques : erreurs de base de donn√©es, probl√®mes de performance
        /// </summary>
        [HttpGet("users")]
        [Authorize(Roles = "Admin")]
        public IActionResult GetUsers()
        {
            try
            {
                // V√©rification que les tables de r√¥les sont correctement configur√©es
                if (_context.UserRoles == null || _context.Roles == null)
                {
                    // ‚úÖ LOG TECHNIQUE : Probl√®me de configuration de base de donn√©es
                    _logger.LogError("üö® Database context configuration error: UserRoles or Roles is null");
                    return StatusCode(StatusCodes.Status500InternalServerError, 
                        "Database configuration error");
                }

                // Requ√™te pour r√©cup√©rer tous les utilisateurs avec leurs r√¥les
                var users = _context.Users
                    .Select(u => new UserDto
                    {
                        Id = u.Id,
                        UserName = u.UserName!,
                        Email = u.Email!,
                        Role = _context.UserRoles!
                                .Where(ur => ur.UserId == u.Id)
                                .Join(_context.Roles,
                                    ur => ur.RoleId,
                                    role => role.Id,
                                    (ur, role) => role.Name)
                                .FirstOrDefault()
                    })
                    .ToList();

                return Ok(users);
            }
            catch (InvalidOperationException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur de requ√™te LINQ/EF
                _logger.LogError(ex, "‚ùå Database query error while retrieving users list");
                return StatusCode(500, "Database query error");
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur g√©n√©rique
                _logger.LogError(ex, "‚ùå Technical error while retrieving users list");
                return StatusCode(500, "An internal error occurred");
            }
        }

        [HttpGet("users/{id}")]
        [Authorize(Roles = "Admin")]
        public IActionResult GetUserById(string id)
        {
            try
            {
                // Recherche de l'utilisateur par ID avec son r√¥le
                var user = _context.Users
                    .Where(u => u.Id == id)
                    .Select(u => new UserDto
                    {
                        Id = u.Id,
                        UserName = u.UserName!,
                        Email = u.Email!,
                        Role = _context.UserRoles
                                .Where(ur => ur.UserId == u.Id)
                                .Join(_context.Roles,
                                    ur => ur.RoleId,
                                    role => role.Id,
                                    (ur, role) => role.Name)
                                .FirstOrDefault()
                    })
                    .FirstOrDefault();

                if (user == null)
                {
                    return NotFound($"User with id {id} not found.");
                }

                return Ok(user);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur lors de la r√©cup√©ration
                _logger.LogError(ex, "‚ùå Technical error while retrieving user {UserId}", id);
                return StatusCode(500, "An internal error occurred");
            }
        }

        [HttpGet("users/role/{roleName}")]
        [Authorize(Roles = "Admin")]
        public IActionResult GetUsersByRole(string roleName)
        {
            try
            {
                // R√©cup√©rer le r√¥le correspondant
                var role = _context.Roles.FirstOrDefault(r => r.Name == roleName);

                // V√©rifier si le r√¥le existe
                if (role == null)
                {
                    return NotFound($"Role '{roleName}' not found.");
                }

                var users = _context.Users
                    .Where(u => _context.UserRoles
                        .Any(ur => ur.UserId == u.Id && ur.RoleId == role.Id))
                    .Select(u => new UserDto
                    {
                        Id = u.Id,
                        UserName = u.UserName!,
                        Email = u.Email!,
                        Role = roleName
                    })
                    .ToList();

                return Ok(users);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur lors de la recherche par r√¥le
                _logger.LogError(ex, "‚ùå Technical error while retrieving users by role {RoleName}", roleName);
                return StatusCode(500, "An internal error occurred");
            }
        }

        [HttpGet("users/search")]
        [Authorize(Roles = "Admin")]
        public IActionResult SearchUsers([FromQuery] string query)
        {
            // Validation du terme de recherche
            if (string.IsNullOrWhiteSpace(query))
            {
                return BadRequest("Search query cannot be empty");
            }

            try
            {
                // Recherche dans les noms d'utilisateur et emails
                var users = _context.Users
                    .Where(u => u.UserName!.Contains(query) || u.Email!.Contains(query))
                    .Select(u => new UserDto
                    {
                        Id = u.Id,
                        UserName = u.UserName!,
                        Email = u.Email!,
                        Role = _context.UserRoles
                                .Where(ur => ur.UserId == u.Id)
                                .Join(_context.Roles,
                                    ur => ur.RoleId,
                                    role => role.Id,
                                    (ur, role) => role.Name)
                                .FirstOrDefault()
                    })
                    .ToList();

                return Ok(users);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur lors de la recherche
                _logger.LogError(ex, "‚ùå Technical error during user search with query '{Query}'", query);
                return StatusCode(500, "An internal error occurred during search");
            }
        }

        [HttpGet("users/{id}/notifications")]
        [Authorize]
        public IActionResult GetUserNotifications(string id)
        {
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var isAdmin = User.IsInRole("Admin");
            
            // V√©rification des droits d'acc√®s
            if (currentUserId != id && !isAdmin)
            {
                return Forbid("You can only access your own notifications");
            }

            try
            {
                // R√©cup√©ration des notifications de l'utilisateur
                var notifications = _context.UserNotifications
                    .Where(un => un.UserId == id)
                    .Include(un => un.Notification)  // Chargement des d√©tails de notification
                    .Select(un => new 
                    {
                        NotificationId = un.NotificationId,
                        Content = un.Notification != null ? un.Notification.Content : "No content available",
                        IsRead = un.Notification != null && un.Notification.IsRead,
                        CreatedAt = un.Notification != null ? un.Notification.CreatedAt : DateTime.MinValue
                    })
                    .OrderByDescending(n => n.CreatedAt)  // Plus r√©centes en premier
                    .ToList();

                return Ok(notifications);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur lors de la r√©cup√©ration des notifications
                _logger.LogError(ex, "‚ùå Technical error while retrieving notifications for user {UserId}", id);
                return StatusCode(500, "An internal error occurred while retrieving notifications");
            }
        }

        // ===== M√âTHODE PRIV√âE DE G√âN√âRATION JWT =====
        
        /// <summary>
        /// G√âN√âRATION D'UN TOKEN JWT
        /// Logs techniques : erreurs de configuration, probl√®mes de signature
        /// </summary>
        private string GenerateJwtToken(ApplicationUser user, IList<string> roles)
        {
            try
            {
                // Cr√©ation des claims (informations incluses dans le token)
                var claims = new List<Claim>
                {
                    new Claim(JwtRegisteredClaimNames.Sub, user.Id),
                    new Claim(JwtRegisteredClaimNames.Email, user.Email!),
                    new Claim(ClaimTypes.Name, user.UserName!),
                    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
                };

                // Ajout des r√¥les en tant que claims
                claims.AddRange(roles.Select(role => new Claim(ClaimTypes.Role, role)));

                // R√©cup√©ration de la cl√© secr√®te depuis la configuration
                var jwtKey = _configuration["Jwt:Key"];
                if (string.IsNullOrEmpty(jwtKey))
                {
                    // ‚úÖ LOG TECHNIQUE : Probl√®me de configuration critique
                    _logger.LogError("üö® JWT Key is not configured in appsettings - authentication will fail");
                    throw new InvalidOperationException("JWT Key is not configured.");
                }

                // V√©rification des autres param√®tres JWT
                var issuer = _configuration["Jwt:Issuer"];
                var audience = _configuration["Jwt:Audience"];
                
                if (string.IsNullOrEmpty(issuer) || string.IsNullOrEmpty(audience))
                {
                    // ‚úÖ LOG TECHNIQUE : Configuration JWT incompl√®te
                    _logger.LogError("üö® JWT Issuer or Audience not configured - tokens may be invalid");
                }

                // Cr√©ation de la cl√© de signature sym√©trique
                var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey));
                var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

                // Cr√©ation du token JWT
                var token = new JwtSecurityToken(
                    issuer: issuer,
                    audience: audience,
                    claims: claims,
                    expires: DateTime.UtcNow.AddHours(3),
                    signingCredentials: creds
                );

                return new JwtSecurityTokenHandler().WriteToken(token);
            }
            catch (ArgumentException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Probl√®me avec les param√®tres du token
                _logger.LogError(ex, "‚ùå Invalid arguments during JWT token generation");
                throw;
            }
            catch (SecurityTokenException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur de s√©curit√© lors de la cr√©ation du token
                _logger.LogError(ex, "‚ùå Security error during JWT token generation");
                throw;
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur g√©n√©rale
                _logger.LogError(ex, "‚ùå Unexpected error during JWT token generation");
                throw;
            }
        }
    }
}


 /* √† envisager :
        R√©cup√©rer la liste des utilisateurs :
        Dans une m√©thode pour r√©cup√©rer tous les utilisateurs (par exemple, GetAllUsers() ou GetUsers()), UserDto est pratique pour filtrer et structurer les informations utilisateur avant de les renvoyer au client.

        R√©cup√©rer les informations d‚Äôun utilisateur sp√©cifique :
        Une m√©thode comme GetUserById() ou GetUserProfile() pourrait utiliser UserDto pour fournir des informations d√©taill√©es sur un utilisateur sp√©cifique sans exposer d‚Äôinformations sensibles.

        Filtrer les utilisateurs par r√¥les :
        Si vous avez une m√©thode comme GetUsersByRole(string roleName) pour r√©cup√©rer uniquement les utilisateurs ayant un r√¥le sp√©cifique, UserDto serait id√©al pour structurer la r√©ponse sans exposer l‚Äôint√©gralit√© des entit√©s ApplicationUser.

        Rechercher des utilisateurs par crit√®res :
        Une m√©thode SearchUsers(string query) pourrait utiliser UserDto pour renvoyer des informations utilisateur en r√©ponse √† des crit√®res de recherche, limitant les donn√©es renvoy√©es au strict n√©cessaire.

        Afficher l'activit√© d'un utilisateur :
        Dans des m√©thodes pour afficher les activit√©s des utilisateurs, comme l‚Äôhistorique des favoris ou les statistiques d‚Äôutilisation, UserDto permet d‚Äôinclure seulement les informations essentielles d'un utilisateur.

        Notifications ou activit√© r√©cente :
        Dans des m√©thodes pour afficher les notifications d‚Äôun utilisateur ou l‚Äôactivit√© r√©cente, UserDto est utile pour structurer les informations utilisateur dans la r√©ponse de mani√®re s√©curis√©e.
        */


        /*
        ===== M√âTHODES SUPPL√âMENTAIRES √Ä ENVISAGER =====
        
        Les commentaires ci-dessous d√©crivent des fonctionnalit√©s additionnelles
        qui pourraient √™tre impl√©ment√©es dans ce contr√¥leur :

        üìã GESTION AVANC√âE DES UTILISATEURS :
        - D√©sactivation/r√©activation de comptes utilisateur
        - R√©initialisation de mot de passe par email
        - Changement de r√¥le d'un utilisateur (promotion/r√©trogradation)
        - Suppression d√©finitive d'un compte utilisateur
        - Statistiques d'utilisation par utilisateur

        üîê S√âCURIT√â RENFORC√âE :
        - Authentification √† deux facteurs (2FA)
        - Historique des connexions
        - Verrouillage de compte apr√®s X tentatives √©chou√©es
        - D√©tection d'activit√© suspecte
        - Invalidation de tokens JWT (blacklist)

        üìä ANALYTICS ET MONITORING :
        - Statistiques de connexion
        - Utilisateurs les plus actifs
        - Analyse des tendances d'inscription
        - Monitoring des erreurs d'authentification
        - Rapport d'activit√© administrative

        üì¨ NOTIFICATIONS AVANC√âES :
        - Envoi d'emails de bienvenue
        - Notifications de s√©curit√© (nouvelle connexion)
        - Alertes d'activit√© suspecte
        - Newsletters et communications

        üé® PERSONNALISATION :
        - Th√®mes personnalis√©s par utilisateur
        - Pr√©f√©rences de langue
        - Configuration d'affichage
        - Param√®tres de confidentialit√©

        EXEMPLE D'IMPL√âMENTATION - M√©thode de r√©initialisation de mot de passe :
        
        [HttpPost("reset-password")]
        public async Task<IActionResult> ResetPassword([FromBody] ResetPasswordModel model)
        {
            _logger.LogInformation("üîÑ Password reset attempt for email: {Email}", model.Email);
            
            var user = await _userManager.FindByEmailAsync(model.Email);
            if (user == null)
            {
                _logger.LogWarning("‚ö†Ô∏è Password reset attempted for non-existent email: {Email}", model.Email);
                // Ne pas r√©v√©ler si l'email existe ou non (s√©curit√©)
                return Ok(new { Message = "If the email exists, a reset link has been sent." });
            }

            // G√©n√©ration d'un token de r√©initialisation
            var resetToken = await _userManager.GeneratePasswordResetTokenAsync(user);
            
            // Envoi d'email avec le lien de r√©initialisation
            // ... code d'envoi d'email ...
            
            _logger.LogInformation("üìß Password reset email sent for user {UserId}", user.Id);
            return Ok(new { Message = "Password reset email sent successfully." });
        }
        */

/*

‚úÖ LOGS : Logs techniques uniquement :
- Erreurs d'exception non g√©r√©es
- Probl√®mes de configuration (JWT, r√¥les manquants)
- Erreurs de base de donn√©es et requ√™tes
- Probl√®mes filesystem (upload d'images)
- Erreurs de permissions et I/O
- Incoh√©rences syst√®me critiques
- Probl√®mes de performance

===== EXEMPLES DE LOGS G√âN√âR√âS (TECHNIQUES SEULEMENT) =====

[15:30:16 WRN] üîß Had to create missing 'User' role during registration - check initial setup
[15:32:46 ERR] üö® Critical system inconsistency: PasswordSignIn succeeded but FindByEmail failed for user@example.com
[15:35:20 WRN] üìÅ Had to create missing uploads directory: wwwroot/images/profiles - check deployment setup  
[15:36:12 ERR] ‚ùå File system permission error during profile picture upload
[15:40:15 ERR] üö® Database context configuration error: UserRoles or Roles is null
[15:45:30 ERR] üö® JWT Key is not configured in appsettings - authentication will fail

CES LOGS AIDENT √Ä :
‚úÖ D√©tecter les probl√®mes de configuration
‚úÖ Identifier les erreurs syst√®me
‚úÖ Monitorer les performances
‚úÖ Diagnostiquer les pannes
‚úÖ Assurer la maintenance technique


*/