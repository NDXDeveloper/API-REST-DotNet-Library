using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Threading.Tasks;
using LibraryAPI.Data;
using LibraryAPI.Models;
using Microsoft.AspNetCore.RateLimiting;

namespace LibraryAPI.Controllers
{
    /// <summary>
    /// CONTR√îLEUR API PUBLIQUE
    /// 
    /// Ce contr√¥leur fournit des endpoints publics (sans authentification) pour :
    /// - R√©cup√©ration des livres/magazines les plus populaires
    /// - Statistiques g√©n√©rales de l'API (totaux)
    /// - Commentaires r√©cents sur les livres/magazines
    /// 
    /// LOGS SERILOG (TECHNIQUES UNIQUEMENT) :
    /// - Erreurs de base de donn√©es (connexion, requ√™tes)
    /// - Probl√®mes de performance (requ√™tes lentes, gros datasets)
    /// - Incoh√©rences de donn√©es (auteurs/livres null, relations cass√©es)
    /// - Erreurs de calculs d'agr√©gation (Sum, Count)
    /// - Timeouts sur les requ√™tes publiques
    /// - Probl√®mes de m√©moire avec de gros volumes
    /// 
    /// LOGS D'AUDIT (M√âTIER) :
    /// - Analytics d'usage de l'API publique
    /// - Statistiques de consultation des endpoints
    /// - Monitoring des patterns d'utilisation
    /// </summary>
    [EnableRateLimiting("PublicPolicy")]  // Rate limiting plus permissif pour API publique
    [Route("api/public")]                 // Route publique : /api/public
    [ApiController]                       // Contr√¥leur API avec validation automatique
    public class PublicApiController : ControllerBase
    {
        // ===== SERVICES INJECT√âS =====
        
        /// <summary>
        /// Contexte de base de donn√©es pour les requ√™tes publiques
        /// </summary>
        private readonly ApplicationDbContext _context;
        
        /// <summary>
        /// ‚úÖ SERVICE DE LOGGING SERILOG - LOGS TECHNIQUES SEULEMENT
        /// Utilis√© pour :
        /// - Erreurs techniques (exceptions, probl√®mes de BDD)
        /// - Probl√®mes de performance (requ√™tes lentes, datasets volumineux)
        /// - Erreurs de calculs d'agr√©gation (Sum, Count, Average)
        /// - Incoh√©rences de donn√©es (relations nulles)
        /// - Timeouts de requ√™tes publiques
        /// - Probl√®mes de configuration
        /// 
        /// PAS utilis√© pour :
        /// - Analytics d'usage public (qui consulte quoi)
        /// - Statistiques de trafic web
        /// - M√©triques m√©tier d'utilisation
        /// - G√©olocalisation des requ√™tes
        /// </summary>
        private readonly ILogger<PublicApiController> _logger;

        /// <summary>
        /// ‚úÖ SERVICE D'AUDIT - LOGS M√âTIER ET ANALYTICS
        /// Utilis√© pour :
        /// - Analytics d'usage de l'API publique
        /// - Monitoring des patterns de consultation
        /// - Statistiques d'utilisation des endpoints
        /// - M√©triques m√©tier pour am√©lioration du service
        /// </summary>
        private readonly AuditLogger _auditLogger;

        // ===== CONSTRUCTEUR =====
        
        /// <summary>
        /// Constructeur avec injection de d√©pendances
        /// </summary>
        /// <param name="context">Contexte de base de donn√©es</param>
        /// <param name="logger">‚úÖ Service de logging pour aspects techniques</param>
        /// <param name="auditLogger">‚úÖ Service d'audit pour m√©triques m√©tier</param>
        public PublicApiController(ApplicationDbContext context, ILogger<PublicApiController> logger, AuditLogger auditLogger)
        {
            _context = context;
            _logger = logger;  // ‚úÖ Service de logging technique
            _auditLogger = auditLogger;  // ‚úÖ Ajout du service d'audit m√©tier
        }

        // ===== ENDPOINTS PUBLICS =====

        /// <summary>
        /// OBTENIR LES LIVRES/MAGAZINES LES PLUS POPULAIRES
        /// 
        /// Endpoint public pour r√©cup√©rer les contenus les plus consult√©s
        /// Logs techniques : erreurs de requ√™tes, probl√®mes de performance, donn√©es nulles
        /// </summary>
        /// <param name="count">Nombre d'√©l√©ments √† retourner (par d√©faut: 10)</param>
        /// <returns>Liste des livres/magazines populaires ou erreur</returns>
        [HttpGet("top-books-magazines")]
        public async Task<IActionResult> GetTopBooksMagazines([FromQuery] int count = 10)
        {
            try
            {
                // Validation des param√®tres d'entr√©e
                if (count <= 0 || count > 100)
                {
                    return BadRequest("Count must be between 1 and 100");
                }

                // ‚úÖ LOG TECHNIQUE : D√©tection de requ√™tes potentiellement co√ªteuses
                if (count > 50)
                {
                    _logger.LogWarning("‚ö†Ô∏è Large dataset requested for top books/magazines: {Count} items - potential performance impact", count);
                }

                // Requ√™te pour r√©cup√©rer les livres/magazines les plus populaires
                var topBooksMagazines = await _context.BooksMagazines
                    .OrderByDescending(b => b.ViewCount)
                    .Take(count)
                    .Select(b => new
                    {
                        b.Id,
                        b.Title,
                        Author = b.Author != null ? b.Author.Name : "Unknown Author",  // Protection contre Author null
                        b.Description,
                        b.CoverImagePath,
                        b.ViewCount
                    })
                    .ToListAsync();

                // ‚úÖ LOG TECHNIQUE : D√©tection de probl√®mes de donn√©es
                var itemsWithNullAuthor = await _context.BooksMagazines
                    .Where(b => b.Author == null)
                    .CountAsync();
                
                if (itemsWithNullAuthor > 0)
                {
                    _logger.LogWarning("‚ö†Ô∏è Found {NullAuthorCount} books/magazines with null Author - data integrity issue", itemsWithNullAuthor);
                }

                // ‚úÖ LOG D'AUDIT : Analytics d'usage de l'API publique
                await _auditLogger.LogAsync("PUBLIC_API_USAGE",
                    $"Top books/magazines consult√©s - Count: {count}, Results: {topBooksMagazines.Count}");

                return Ok(topBooksMagazines);
            }
            catch (InvalidOperationException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur dans la requ√™te LINQ (OrderBy, Select, etc.)
                _logger.LogError(ex, "‚ùå Invalid operation during top books/magazines query - possible LINQ issue");
                return StatusCode(500, "Data query error occurred while retrieving popular content");
            }
            catch (TimeoutException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Timeout de requ√™te (probl√®me de performance)
                _logger.LogError(ex, "‚ùå Database timeout during top books/magazines query - performance issue");
                return StatusCode(500, "Database timeout - the query took too long to execute");
            }
            catch (ArgumentException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Probl√®me avec les param√®tres de requ√™te
                _logger.LogError(ex, "‚ùå Argument error during top books/magazines query - Count: {Count}", count);
                return StatusCode(500, "Query parameter error occurred");
            }
            catch (DbUpdateException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Probl√®me de connexion √† la base de donn√©es
                _logger.LogError(ex, "‚ùå Database connection error during top books/magazines query");
                return StatusCode(500, "Database connectivity issue");
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur g√©n√©rique
                _logger.LogError(ex, "‚ùå Unexpected error during top books/magazines query - Count: {Count}", count);
                return StatusCode(500, "An internal error occurred while retrieving popular content");
            }
        }

        /// <summary>
        /// OBTENIR LES STATISTIQUES G√âN√âRALES DE L'API
        /// 
        /// Endpoint public pour les statistiques globales (totaux, compteurs)
        /// Logs techniques : erreurs de calculs d'agr√©gation, probl√®mes de performance
        /// </summary>
        /// <returns>Statistiques g√©n√©rales ou erreur</returns>
        [HttpGet("stats")]
        public async Task<IActionResult> GetStatistics()
        {
            try
            {
                // Requ√™tes d'agr√©gation pour les statistiques
                var totalBooksMagazines = await _context.BooksMagazines.CountAsync();
                var totalDownloads = await _context.BooksMagazines.SumAsync(b => b.DownloadCount);
                var totalViews = await _context.BooksMagazines.SumAsync(b => b.ViewCount);

                // ‚úÖ LOG TECHNIQUE : D√©tection de valeurs anormales dans les statistiques
                if (totalDownloads < 0 || totalViews < 0)
                {
                    _logger.LogWarning("‚ö†Ô∏è Negative values detected in statistics - TotalDownloads: {Downloads}, TotalViews: {Views} - data integrity issue", 
                                      totalDownloads, totalViews);
                }

                // ‚úÖ LOG TECHNIQUE : Surveillance de la croissance des donn√©es
                if (totalBooksMagazines > 10000)
                {
                    _logger.LogInformation("üìä Large dataset detected - {TotalItems} books/magazines - consider performance optimization", totalBooksMagazines);
                }

                var result = new
                {
                    TotalBooksMagazines = totalBooksMagazines,
                    TotalDownloads = totalDownloads,
                    TotalViews = totalViews
                };

                // ‚úÖ LOG D'AUDIT : Analytics de consultation des statistiques publiques
                await _auditLogger.LogAsync("PUBLIC_STATS_ACCESSED",
                    $"Statistiques publiques consult√©es - Books: {totalBooksMagazines}, Downloads: {totalDownloads}, Views: {totalViews}");

                return Ok(result);
            }
            catch (OverflowException ex)
            {
                // ‚úÖ LOG TECHNIQUE : D√©bordement lors des calculs Sum() (valeurs trop grandes)
                _logger.LogError(ex, "‚ùå Overflow error during statistics calculation - values too large for sum operations");
                return StatusCode(500, "Statistics calculation overflow - dataset too large");
            }
            catch (InvalidOperationException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur dans les op√©rations d'agr√©gation
                _logger.LogError(ex, "‚ùå Invalid operation during statistics calculation - possible aggregation issue");
                return StatusCode(500, "Statistics calculation error occurred");
            }
            catch (TimeoutException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Timeout lors des calculs d'agr√©gation
                _logger.LogError(ex, "‚ùå Database timeout during statistics calculation - performance issue");
                return StatusCode(500, "Statistics calculation timeout - dataset too large");
            }
            catch (ArithmeticException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur arithm√©tique lors des Sum()
                _logger.LogError(ex, "‚ùå Arithmetic error during statistics calculation");
                return StatusCode(500, "Mathematical calculation error in statistics");
            }
            catch (DbUpdateException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Probl√®me de connexion/transaction
                _logger.LogError(ex, "‚ùå Database connection error during statistics calculation");
                return StatusCode(500, "Database connectivity issue while calculating statistics");
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur g√©n√©rique
                _logger.LogError(ex, "‚ùå Unexpected error during statistics calculation");
                return StatusCode(500, "An internal error occurred while calculating statistics");
            }
        }

        /// <summary>
        /// OBTENIR LES COMMENTAIRES R√âCENTS
        /// 
        /// Endpoint public pour les commentaires r√©cents sur les livres/magazines
        /// Logs techniques : erreurs de jointures complexes, donn√©es nulles, performance
        /// </summary>
        /// <param name="count">Nombre de commentaires √† retourner (par d√©faut: 10)</param>
        /// <returns>Liste des commentaires r√©cents ou erreur</returns>
        [HttpGet("recent-comments")]
        public async Task<IActionResult> GetRecentComments([FromQuery] int count = 10)
        {
            try
            {
                // Validation des param√®tres d'entr√©e
                if (count <= 0 || count > 50)
                {
                    return BadRequest("Count must be between 1 and 50");
                }

                // ‚úÖ LOG TECHNIQUE : Surveillance des requ√™tes co√ªteuses
                if (count > 25)
                {
                    _logger.LogWarning("‚ö†Ô∏è Large dataset requested for recent comments: {Count} items - potential performance impact", count);
                }

                // Requ√™te avec jointures complexes pour les commentaires r√©cents
                var recentComments = await _context.Comments
                    .OrderByDescending(c => c.CommentDate)
                    .Take(count)
                    .Select(c => new
                    {
                        c.Content,
                        c.CommentDate,
                        User = c.User != null ? c.User.UserName : "Unknown User",           // Protection contre User null
                        BookMagazineTitle = c.BookMagazine != null ? c.BookMagazine.Title : "Unknown Title"  // Protection contre BookMagazine null
                    })
                    .ToListAsync();

                // ‚úÖ LOG TECHNIQUE : D√©tection de probl√®mes d'int√©grit√© relationnelle
                var commentsWithNullUser = await _context.Comments
                    .Where(c => c.User == null)
                    .CountAsync();
                
                var commentsWithNullBookMagazine = await _context.Comments
                    .Where(c => c.BookMagazine == null)
                    .CountAsync();

                if (commentsWithNullUser > 0)
                {
                    _logger.LogWarning("‚ö†Ô∏è Found {NullUserCount} comments with null User - data integrity issue", commentsWithNullUser);
                }

                if (commentsWithNullBookMagazine > 0)
                {
                    _logger.LogWarning("‚ö†Ô∏è Found {NullBookMagazineCount} comments with null BookMagazine - data integrity issue", commentsWithNullBookMagazine);
                }

                // ‚úÖ LOG D'AUDIT : Analytics de consultation des commentaires r√©cents
                await _auditLogger.LogAsync("PUBLIC_COMMENTS_ACCESSED",
                    $"Commentaires r√©cents consult√©s - Count: {count}, Results: {recentComments.Count}");

                return Ok(recentComments);
            }
            catch (InvalidOperationException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur dans la requ√™te avec jointures (navigation properties)
                _logger.LogError(ex, "‚ùå Invalid operation during recent comments query - possible navigation property issue");
                return StatusCode(500, "Data query error occurred while retrieving recent comments");
            }
            catch (ArgumentNullException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Probl√®me avec les param√®tres null dans les jointures
                _logger.LogError(ex, "‚ùå Null argument error during recent comments query");
                return StatusCode(500, "Data access configuration error");
            }
            catch (TimeoutException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Timeout sur requ√™te avec jointures multiples
                _logger.LogError(ex, "‚ùå Database timeout during recent comments query - performance issue with joins");
                return StatusCode(500, "Database timeout - comments query with joins took too long");
            }
            catch (OutOfMemoryException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Probl√®me de m√©moire avec beaucoup de commentaires
                _logger.LogError(ex, "‚ùå Out of memory error during recent comments query - dataset too large");
                return StatusCode(500, "Server memory issue - comments dataset too large");
            }
            catch (DbUpdateException ex)
            {
                // ‚úÖ LOG TECHNIQUE : Probl√®me de connexion
                _logger.LogError(ex, "‚ùå Database connection error during recent comments query");
                return StatusCode(500, "Database connectivity issue while retrieving comments");
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG TECHNIQUE : Erreur g√©n√©rique
                _logger.LogError(ex, "‚ùå Unexpected error during recent comments query - Count: {Count}", count);
                return StatusCode(500, "An internal error occurred while retrieving recent comments");
            }
        }
    }
}


/*
===== DOCUMENTATION TECHNIQUE  =====

‚úÖ ARCHITECTURE ET RESPONSABILIT√âS :
Ce contr√¥leur expose une API publique (sans authentification) pour fournir des donn√©es
de consultation g√©n√©rale sur la biblioth√®que num√©rique. Il sert trois endpoints
principaux optimis√©s pour des acc√®s fr√©quents et performants.

‚úÖ ENDPOINTS DISPONIBLES :
1. GET /api/public/top-books-magazines?count=X
   ‚Üí R√©cup√®re les livres/magazines les plus populaires (bas√© sur ViewCount)
   ‚Üí Param√®tre : count (1-100, d√©faut: 10)
   ‚Üí Rate limiting : PublicPolicy (plus permissif)

2. GET /api/public/stats
   ‚Üí Statistiques globales de la biblioth√®que
   ‚Üí Retourne : total livres/magazines, t√©l√©chargements, vues
   ‚Üí Calculs d'agr√©gation optimis√©s

3. GET /api/public/recent-comments?count=X
   ‚Üí Commentaires r√©cents sur les livres/magazines
   ‚Üí Param√®tre : count (1-50, d√©faut: 10)
   ‚Üí Jointures complexes avec protection null

‚úÖ SYST√àME DE LOGGING DUAL IMPL√âMENT√â :

üîß LOGS TECHNIQUES (Serilog - _logger) :
- Erreurs de base de donn√©es et connectivity issues
- Probl√®mes de performance (requ√™tes lentes >50 items, timeouts)
- Erreurs de calculs d'agr√©gation (OverflowException, ArithmeticException)
- Incoh√©rences de donn√©es (auteurs/utilisateurs/livres null)
- Erreurs de requ√™tes LINQ complexes (OrderBy, Select, jointures)
- Probl√®mes de m√©moire (OutOfMemoryException sur gros datasets)
- Surveillance croissance donn√©es (alertes >10k items)
- Erreurs de configuration et param√®tres invalides

üìä LOGS D'AUDIT (AuditLogger - _auditLogger) :
- Analytics d'usage des endpoints publics
- M√©triques de consultation (count demand√© vs r√©sultats obtenus)
- Patterns d'utilisation pour optimisation
- Statistiques de trafic pour monitoring de charge

‚úÖ EXEMPLES DE LOGS G√âN√âR√âS :

üîß LOGS TECHNIQUES :
[15:30:16 WRN] ‚ö†Ô∏è Large dataset requested for top books/magazines: 75 items - potential performance impact
[15:32:45 WRN] ‚ö†Ô∏è Found 12 books/magazines with null Author - data integrity issue  
[15:35:20 ERR] ‚ùå Overflow error during statistics calculation - values too large for sum operations
[15:40:10 INF] üìä Large dataset detected - 15000 books/magazines - consider performance optimization
[15:42:30 WRN] ‚ö†Ô∏è Negative values detected in statistics - TotalDownloads: -50 - data integrity issue
[15:45:15 WRN] ‚ö†Ô∏è Found 8 comments with null User - data integrity issue
[15:50:20 ERR] ‚ùå Database timeout during recent comments query - performance issue with joins

üìä LOGS D'AUDIT :
[2025-08-01 15:30:16] [AUDIT] [PUBLIC_API_USAGE] User: anonymous - Top books/magazines consult√©s - Count: 10, Results: 10
[2025-08-01 15:35:42] [AUDIT] [PUBLIC_STATS_ACCESSED] User: anonymous - Statistiques publiques consult√©es - Books: 1250, Downloads: 5420, Views: 15680
[2025-08-01 15:40:18] [AUDIT] [PUBLIC_COMMENTS_ACCESSED] User: anonymous - Commentaires r√©cents consult√©s - Count: 15, Results: 15

‚úÖ OPTIMISATIONS TECHNIQUES IMPL√âMENT√âES :

üöÄ PERFORMANCE :
- Rate limiting adaptatif (PublicPolicy plus permissif)
- Validation stricte des param√®tres d'entr√©e (count limits)
- Protection contre les requ√™tes co√ªteuses avec alertes
- Requ√™tes asynchrones partout (ToListAsync, CountAsync, SumAsync)
- Select optimis√©s pour minimiser les donn√©es transf√©r√©es
- Take() appliqu√© t√¥t dans les requ√™tes pour limiter les r√©sultats

üõ°Ô∏è ROBUSTESSE :
- Gestion exhaustive des exceptions par type sp√©cifique
- Protection contre les valeurs nulles dans les jointures
- D√©tection proactive des probl√®mes d'int√©grit√© de donn√©es
- Fallback values pour √©viter les crashs
- Messages d'erreur informatifs mais pas trop techniques pour l'API publique

üîç MONITORING ET OBSERVABILIT√â :
- Surveillance automatique des datasets volumineux
- D√©tection des valeurs anormales (n√©gatives, d√©bordements)
- Alertes de performance configurables
- M√©triques d'usage pour analytics
- Tra√ßabilit√© compl√®te des acc√®s publics

‚úÖ S√âCURIT√â APPLIQU√âE :

üîí PROTECTION DONN√âES :
- Aucune donn√©e sensible expos√©e (pas d'emails, IDs utilisateurs)
- Validation stricte des param√®tres pour √©viter l'injection
- Rate limiting pour √©viter les abus de l'API publique
- Protection contre les attaques par d√©ni de service (limits count)

üîí INT√âGRIT√â :
- V√©rification automatique des relations nulles
- Protection contre les d√©bordements de calculs
- Gestion des timeouts pour √©viter les blocages
- Validation des datasets avant exposition

‚úÖ PATTERNS DE CONCEPTION UTILIS√âS :

üìê ARCHITECTURE :
- Injection de d√©pendances pour tous les services
- S√©paration claire entre logs techniques et m√©tier
- Repository pattern via Entity Framework
- Async/await pattern pour toutes les op√©rations I/O

üìê GESTION D'ERREURS :
- Exception handling granulaire par type
- Logging structur√© avec contexte
- Messages d'erreur adapt√©s au niveau public
- Codes HTTP appropri√©s (400, 500, etc.)

üìê PERFORMANCE :
- Lazy loading √©vit√© avec Select explicites
- Agr√©gations optimis√©es avec protection d√©bordement
- Pagination native avec Take()
- Monitoring proactif des performances

‚úÖ √âVOLUTIONS RECOMMAND√âES :

üîÆ AM√âLIORATIONS POSSIBLES :
- Cache Redis pour les statistiques (rafra√Æchies toutes les 5min)
- Pagination compl√®te avec Skip/Take pour gros datasets
- Compression gzip pour les r√©ponses JSON volumineuses
- API versioning pour √©volutions futures
- Throttling adaptatif bas√© sur la charge serveur

üîÆ NOUVELLES M√âTRIQUES :
- G√©olocalisation des requ√™tes publiques (analytics)
- A/B testing sur les formats de r√©ponse
- M√©triques de temps de r√©ponse par endpoint
- Correlation entre usage public et inscriptions

üîÆ MONITORING AVANC√â :
- Dashboards temps r√©el des endpoints publics
- Alertes automatiques sur pics de trafic
- Analyse pr√©dictive des patterns d'usage
- Health checks sp√©cifiques aux donn√©es publiques

‚úÖ MAINTENANCE ET SUPPORT :

üõ†Ô∏è DEBUGGING :
- Logs structur√©s pour faciliter les recherches
- TraceId dans chaque r√©ponse d'erreur
- M√©triques d√©taill√©es pour diagnostics
- Tests de charge recommand√©s sur endpoints populaires

üõ†Ô∏è √âVOLUTIVIT√â :
- Code modulaire facilement extensible
- Patterns r√©utilisables pour nouveaux endpoints
- Configuration externalis√©e (rate limits, timeouts)
- Architecture pr√™te pour micro-services

*/