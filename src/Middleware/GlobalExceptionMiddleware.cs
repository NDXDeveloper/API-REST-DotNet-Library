using System.Security.Claims;   // Pour r√©cup√©rer les informations de l'utilisateur connect√© (ID, nom, etc.)
using Serilog;                  // Syst√®me de logging avanc√© pour enregistrer les erreurs et √©v√©nements

/// <summary>
/// MIDDLEWARE DE GESTION GLOBALE DES EXCEPTIONS
/// 
/// Ce middleware intercepte TOUTES les exceptions non g√©r√©es dans l'application
/// et les traite de mani√®re uniforme au lieu de laisser l'application planter.
/// 
/// R√îLE :
/// - Capture automatiquement toutes les erreurs
/// - Log les erreurs avec des d√©tails contextuels (qui, quoi, o√π, quand)
/// - Retourne une r√©ponse JSON standardis√©e au client
/// - √âvite d'exposer les d√©tails techniques sensibles aux utilisateurs
/// </summary>
public class GlobalExceptionMiddleware
{
    // ===== PROPRI√âT√âS PRIV√âES =====

    // D√©l√©gu√© qui repr√©sente le prochain middleware dans la cha√Æne de traitement
    // Chaque requ√™te HTTP passe par une s√©rie de middlewares (pipeline)
    private readonly RequestDelegate _next;

    // Service de logging pour enregistrer les erreurs dans les fichiers de logs
    private readonly ILogger<GlobalExceptionMiddleware> _logger;

    //private readonly AuditLogger _auditLogger;

    // ===== CONSTRUCTEUR =====

    /// <summary>
    /// Constructeur du middleware - appel√© automatiquement par ASP.NET Core
    /// lors de l'injection de d√©pendances
    /// </summary>
    /// <param name="next">Le prochain middleware dans le pipeline</param>
    /// <param name="logger">Service de logging inject√© automatiquement</param>
    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger)
    {
        _next = next;   // Stocke la r√©f√©rence vers le middleware suivant
        _logger = logger;   // Stocke le service de logging
        
    }

    // ===== M√âTHODE PRINCIPALE D'EX√âCUTION =====

    /// <summary>
    /// M√©thode appel√©e automatiquement pour chaque requ√™te HTTP
    /// C'est le point d'entr√©e principal du middleware
    /// </summary>
    /// <param name="context">Contexte HTTP contenant toutes les infos de la requ√™te</param>
    public async Task InvokeAsync(HttpContext context)
    {
        try
        {
            // Essaie d'ex√©cuter le middleware suivant dans la cha√Æne
            // Si tout se passe bien, la requ√™te continue normalement
            await _next(context);
        }
        catch (Exception ex)
        {
            // Si une exception se produit ANYWHERE dans l'application,
            // on la capture ici et on la traite proprement
            await HandleExceptionAsync(context, ex);
        }
    }

    // ===== GESTIONNAIRE D'EXCEPTIONS =====

    /// <summary>
    /// Traite une exception captur√©e et g√©n√®re une r√©ponse appropri√©e
    /// </summary>
    /// <param name="context">Contexte HTTP de la requ√™te qui a caus√© l'erreur</param>
    /// <param name="exception">L'exception qui s'est produite</param>
    private async Task HandleExceptionAsync(HttpContext context, Exception exception)
    {
        // ===== R√âCUP√âRATION DES INFORMATIONS CONTEXTUELLES =====

        // R√©cup√®re l'ID de l'utilisateur connect√© (s'il y en a un)
        // ClaimTypes.NameIdentifier = identifiant unique de l'utilisateur dans le syst√®me
        var userId = context.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "Anonymous";
        // R√©cup√®re le nom d'utilisateur (email ou nom d'affichage)
        var userName = context.User?.Identity?.Name ?? "Anonymous";
        // R√©cup√®re le chemin de l'URL demand√©e (ex: "/api/books/123")
        var path = context.Request.Path.Value ?? "";
        // R√©cup√®re la m√©thode HTTP utilis√©e (GET, POST, PUT, DELETE, etc.)
        var method = context.Request.Method;
        // R√©cup√®re les param√®tres de requ√™te (ex: "?page=1&limit=10")
        var queryString = context.Request.QueryString.Value ?? "";
        // R√©cup√®re l'User-Agent (navigateur/application qui fait la requ√™te)
        var userAgent = context.Request.Headers["User-Agent"].FirstOrDefault() ?? "Unknown";
        // R√©cup√®re l'adresse IP du client qui fait la requ√™te
        var clientIP = context.Connection.RemoteIpAddress?.ToString() ?? "Unknown";

        // ===== LOGGING PRINCIPAL DE L'ERREUR =====

        // Enregistre l'erreur avec tous les d√©tails contextuels
        // LogError = niveau d'erreur (sera affich√© en rouge dans les logs)
        _logger.LogError(exception,
            "üö® Unhandled exception occurred. " +
            "Path: {Path}, Method: {Method}, Query: {QueryString}, " +
            "UserId: {UserId}, UserName: {UserName}, " +
            "ClientIP: {ClientIP}, UserAgent: {UserAgent}",
            path, method, queryString, userId, userName, clientIP, userAgent);

        // ===== LOGGING SP√âCIALIS√â PAR TYPE D'EXCEPTION =====

        // Traitement diff√©renci√© selon le type d'erreur pour des logs plus pr√©cis
        switch (exception)
        {
            // Erreur d'autorisation (utilisateur pas autoris√© √† faire cette action)
            case UnauthorizedAccessException:
                _logger.LogWarning("üîí Unauthorized access attempt on {Path} by {UserId} from {ClientIP}",
                                  path, userId, clientIP);
                break;
            // Erreur d'argument (param√®tre invalide pass√© √† une m√©thode)
            case ArgumentException argEx:
                _logger.LogWarning("üìù Invalid argument provided: {ParameterName} = {Message}",
                                  argEx.ParamName, argEx.Message);
                break;
            // Erreur d'op√©ration invalide (action impossible dans l'√©tat actuel)
            case InvalidOperationException:
                _logger.LogError("‚öôÔ∏è Invalid operation: {Message} on {Path}", exception.Message, path);
                break;
            // Erreur de timeout (op√©ration trop longue)
            case TimeoutException:
                _logger.LogError("‚è±Ô∏è Operation timeout on {Path} after {Method} request", path, method);
                break;
        }

        // ===== LOGS D'AUDIT POUR √âV√âNEMENTS DE S√âCURIT√â ===== 
        var auditLogger = context.RequestServices.GetService<AuditLogger>();
        if (auditLogger != null)
        {
            try
            {
                switch (exception)
                {
                    case UnauthorizedAccessException:
                        await auditLogger.LogAsync(LibraryAPI.Models.AuditActions.UNAUTHORIZED_ACCESS,
                            $"Acc√®s non autoris√© tent√© sur {path} depuis l'IP {clientIP}");
                        break;
                    case TimeoutException:
                        await auditLogger.LogAsync(LibraryAPI.Models.AuditActions.SYSTEM_ERROR,
                            $"Timeout syst√®me sur {path}");
                        break;
                    default:
                        await auditLogger.LogAsync(LibraryAPI.Models.AuditActions.SYSTEM_ERROR,
                            $"Erreur syst√®me: {exception.GetType().Name} sur {path}");
                        break;
                }
            }
            catch
            {
                // √âviter les erreurs en cascade lors de l'audit
            }
        }

        // ===== D√âTERMINATION DU CODE DE STATUT HTTP =====

        // Choisit le code de statut HTTP appropri√© selon le type d'erreur
        // Pattern matching C# moderne (switch expressions)
        var statusCode = exception switch
        {
            UnauthorizedAccessException => 401,     // Non autoris√©
            ArgumentException => 400,               // Mauvaise requ√™te
            FileNotFoundException => 404,           // Ressource non trouv√©e
            TimeoutException => 408,                // Timeout de requ√™te
            _ => 500                                // Erreur serveur interne (d√©faut)
        };

        // ===== CR√âATION DE LA R√âPONSE D'ERREUR =====

        // Configure la r√©ponse HTTP
        context.Response.StatusCode = statusCode;           // D√©finit le code de statut
        context.Response.ContentType = "application/json";  // R√©ponse en JSON

        // Cr√©e un objet de r√©ponse standardis√©
        var response = new
        {
            // Message d'erreur √† afficher √† l'utilisateur
            Message = statusCode == 500
                ? "An internal server error occurred. Please try again later."  // Message g√©n√©rique pour erreur 500
                : exception.Message,                                            // Message sp√©cifique pour autres erreurs 
            TraceId = context.TraceIdentifier,  // Identifiant unique de la requ√™te pour le suivi/debugging
            Timestamp = DateTime.UtcNow,        // Horodatage de l'erreur
            Path = path,                        // Informations de contexte pour le debugging
            Method = method,                    // Informations de contexte pour le debugging
            StatusCode = statusCode             // Informations de contexte pour le debugging
        };

        // ===== ENVOI DE LA R√âPONSE AU CLIENT =====

        // S√©rialise l'objet response en JSON et l'envoie au client
        await context.Response.WriteAsync(System.Text.Json.JsonSerializer.Serialize(response));
    }
}

/*
COMMENT UTILISER CE MIDDLEWARE :

1. Dans Program.cs, ajouter cette ligne AVANT les autres middlewares :
   app.UseMiddleware<GlobalExceptionMiddleware>();

2. Ce middleware va automatiquement :
   ‚úÖ Capturer toutes les exceptions non g√©r√©es
   ‚úÖ Logger les erreurs avec plein de d√©tails
   ‚úÖ Retourner des r√©ponses JSON propres
   ‚úÖ √âviter que l'application plante

3. Les logs seront sauvegard√©s dans les fichiers configur√©s avec Serilog
   et on pourra voir exactement qui a fait quoi quand une erreur arrive.

EXEMPLE DE LOG G√âN√âR√â :
[15:30:45 ERR] üö® Unhandled exception occurred. Path: /api/books, Method: POST, 
Query: , UserId: user123, UserName: john@example.com, 
ClientIP: 192.168.1.100, UserAgent: Mozilla/5.0...
System.ArgumentException: Le titre du livre ne peut pas √™tre vide
   at LibraryAPI.Controllers.BooksController.Create(Book book)
*/