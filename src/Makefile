# Makefile pour LibraryAPI .NET 8
# Usage: make [command]

# Variables de base
PROJECT_NAME = src
PROJECT_FILE = $(PROJECT_NAME).csproj
DOCKER_IMAGE = library-api
DOCKER_TAG = latest

# === Variables de version Git avec fallbacks s√©curis√©s ===
VERSION ?= $(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
BUILD_TIME = $(shell date -u +%Y-%m-%dT%H:%M:%SZ)
GIT_COMMIT = $(shell git rev-parse HEAD 2>/dev/null || echo "unknown")
GIT_TAG = $(shell git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0-dev")
GIT_BRANCH = $(shell git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
GIT_DIRTY = $(shell git diff --quiet 2>/dev/null || echo "-dirty")

# Version nettoy√©e pour .NET (supprime le 'v' prefix)
DOTNET_VERSION = $(shell echo $(VERSION) | sed 's/^v//' | sed 's/-dirty//' | sed 's/-dev//' | sed 's/-.*/.0/')
# Version informative compl√®te
VERSION_FULL = $(VERSION)+$(shell date +%Y%m%d%H%M).$(shell echo $(GIT_COMMIT) | cut -c1-7)

# D√©tection de l'environnement
IS_GIT_REPO = $(shell git rev-parse --git-dir >/dev/null 2>&1 && echo "true" || echo "false")
IS_CI = $(shell [ -n "$$CI" ] && echo "true" || echo "false")

# Couleurs pour l'affichage
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

.PHONY: help install build test clean run-dev run-prod run-railway docker ssl-dev ssl-clean migration-add migration-update migration-list migration-remove migration-script railway-login railway-deploy dev-setup ef-install ef-check ubuntu-setup dotnet-install vscode-install tools-install system-update nuget-restore nuget-update nuget-clean nuget-outdated version-info build-dev build-ci build-release auto-build check-env docker-build-versioned create-dev-tag clean-dev-tags version-env

# Affichage de l'aide par d√©faut
help:
	@echo "$(GREEN)üìö LibraryAPI - Commandes disponibles$(NC)"
	@echo ""
	@echo "$(YELLOW)üêß Installation Ubuntu :$(NC)"
	@echo "  make ubuntu-setup    - Installation compl√®te environnement Ubuntu"
	@echo "  make dotnet-install  - Installer .NET 8 SDK"
	@echo "  make vscode-install  - Installer Visual Studio Code + extensions"
	@echo "  make tools-install   - Installer tous les outils de d√©veloppement"
	@echo "  make system-update   - Mettre √† jour le syst√®me Ubuntu"
	@echo ""
	@echo "$(YELLOW)üõ†Ô∏è  D√©veloppement :$(NC)"
	@echo "  make install         - Installer les d√©pendances"
	@echo "  make build           - Builder le projet avec version Git auto"
	@echo "  make test            - Lancer les tests"
	@echo "  make clean           - Nettoyer les artifacts"
	@echo "  make run-dev         - Lancer en mode d√©veloppement"
	@echo "  make run-prod        - Lancer en mode production"
	@echo "  make run-railway     - Lancer en mode Railway"
	@echo "  make dev-setup       - Configuration compl√®te d√©veloppement"
	@echo ""
	@echo "$(YELLOW)üì¶ Gestion des versions intelligente :$(NC)"
	@echo "  make version-info    - Afficher toutes les infos de version"
	@echo "  make build-dev       - Build forc√© en mode d√©veloppement"
	@echo "  make build-ci        - Build pour CI/CD (v√©rifie la version)"
	@echo "  make build-release   - Build release (tag requis, repo propre)"
	@echo "  make auto-build      - Build intelligent selon l'environnement"
	@echo "  make check-env       - V√©rifier l'environnement Git"
	@echo "  make version-env     - Versions pour chaque environnement"
	@echo "  make create-dev-tag TAG=v1.0.0-alpha - Cr√©er tag d√©veloppement"
	@echo ""
	@echo "$(YELLOW)üîß Entity Framework Core :$(NC)"
	@echo "  make ef-install      - Installer l'outil Entity Framework Core globalement"
	@echo "  make ef-check        - V√©rifier la version d'Entity Framework Core"
	@echo ""
	@echo "$(YELLOW)üì¶ Gestion des packages :$(NC)"
	@echo "  make nuget-restore   - Restaurer les packages NuGet"
	@echo "  make nuget-update    - Mettre √† jour les packages NuGet"
	@echo "  make nuget-clean     - Nettoyer le cache NuGet"
	@echo "  make nuget-outdated  - Lister les packages obsol√®tes"
	@echo ""
	@echo "$(YELLOW)üîí Certificats SSL :$(NC)"
	@echo "  make ssl-dev         - G√©n√©rer certificats d√©veloppement"
	@echo "  make ssl-clean       - Nettoyer certificats"
	@echo "  make ssl-trust       - Approuver certificats syst√®me"
	@echo ""
	@echo "$(YELLOW)üóÑÔ∏è  Migrations Entity Framework :$(NC)"
	@echo "  make migration-add NAME=nom    - Ajouter migration"
	@echo "  make migration-update          - Appliquer migrations"
	@echo "  make migration-list            - Lister migrations"
	@echo "  make migration-remove          - Supprimer derni√®re migration"
	@echo "  make migration-script          - G√©n√©rer script SQL"
	@echo ""
	@echo "$(YELLOW)üöÄ Railway :$(NC)"
	@echo "  make railway-login   - Se connecter √† Railway"
	@echo "  make railway-deploy  - D√©ployer sur Railway"
	@echo "  make railway-logs    - Voir les logs Railway"
	@echo "  make railway-vars    - Voir variables Railway"
	@echo ""
	@echo "$(YELLOW)üê≥ Docker :$(NC)"
	@echo "  make docker-build    - Builder image Docker"
	@echo "  make docker-build-versioned - Docker avec version Git"
	@echo "  make docker-run      - Lancer conteneur"
	@echo "  make docker-clean    - Nettoyer images Docker"

# === Gestion des versions ===

# Affichage des informations de version
version-info:
	@echo "$(GREEN)üì¶ Informations de version:$(NC)"
	@echo "  Version: $(VERSION)"
	@echo "  Version .NET: $(DOTNET_VERSION)"
	@echo "  Version compl√®te: $(VERSION_FULL)"
	@echo "  Tag Git: $(GIT_TAG)"
	@echo "  Commit: $(GIT_COMMIT)"
	@echo "  Branche: $(GIT_BRANCH)"
	@echo "  √âtat: $(if $(findstring dirty,$(VERSION)),sale,propre)"
	@echo "  Build: $(BUILD_TIME)"
	@echo "  Repo Git: $(IS_GIT_REPO)"
	@echo "  CI/CD: $(IS_CI)"

# V√©rification de l'environnement
check-env:
	@echo "$(GREEN)üîç V√©rification de l'environnement...$(NC)"
	@if [ "$(IS_GIT_REPO)" = "false" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Pas de repository Git - version par d√©faut 'dev'$(NC)"; \
	elif [ "$(VERSION)" = "dev" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Aucun tag Git trouv√© - version 'dev'$(NC)"; \
		echo "$(YELLOW)Pour cr√©er un tag: git tag v1.0.0$(NC)"; \
	elif echo "$(VERSION)" | grep -q dirty; then \
		echo "$(YELLOW)‚ö†Ô∏è  Repository sale - version '$(VERSION)'$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ Environnement Git propre - version '$(VERSION)'$(NC)"; \
	fi

# Version pour diff√©rents environnements
version-env:
	@echo "$(GREEN)üìã Versions par environnement:$(NC)"
	@echo "  D√©veloppement: $(VERSION)"
	@echo "  Production: $(shell echo $(VERSION) | sed 's/-dirty//' | sed 's/-dev//')"
	@echo "  Docker: $(if $(findstring dev,$(VERSION)),dev,$(shell echo $(VERSION) | sed 's/^v//'))"
	@echo "  .NET: $(DOTNET_VERSION)"

# === Build avec versions ===

# Installation des d√©pendances
install:
	@echo "$(GREEN)üì¶ Installation des d√©pendances...$(NC)"
	dotnet restore $(PROJECT_FILE)
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

# Build avec gestion intelligente des versions
build:
	@echo "$(GREEN)üî® Build du projet $(VERSION)...$(NC)"
	@if [ "$(VERSION)" = "dev" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Mode d√©veloppement (pas de Git)$(NC)"; \
	elif [ "$(IS_GIT_REPO)" = "false" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Pas de repository Git d√©tect√©$(NC)"; \
	fi
	dotnet build $(PROJECT_FILE) \
		--configuration Release \
		--property:Version="$(DOTNET_VERSION)" \
		--property:AssemblyVersion="$(DOTNET_VERSION)" \
		--property:FileVersion="$(DOTNET_VERSION)" \
		--property:InformationalVersion="$(VERSION_FULL)" \
		--property:GitTag="$(GIT_TAG)" \
		--property:GitCommit="$(GIT_COMMIT)" \
		--property:GitBranch="$(GIT_BRANCH)" \
		--property:GitDirty="$(GIT_DIRTY)" \
		--property:BuildTime="$(BUILD_TIME)" \
		--property:BuildEnvironment="$(if $(IS_CI),CI,Local)"
	@echo "$(GREEN)‚úÖ Build termin√© $(VERSION)$(NC)"

# Build d√©veloppement (force version dev)
build-dev:
	@echo "$(GREEN)üî® Build d√©veloppement...$(NC)"
	$(MAKE) build VERSION=dev DOTNET_VERSION=0.0.1

# Build pour CI/CD
build-ci:
	@echo "$(GREEN)üî® Build CI/CD...$(NC)"
	@if [ "$(VERSION)" = "dev" ] && [ "$(IS_CI)" = "true" ]; then \
		echo "$(RED)‚ùå Version 'dev' non autoris√©e en CI/CD$(NC)"; \
		echo "$(YELLOW)Cr√©ez un tag ou d√©finissez VERSION$(NC)"; \
		exit 1; \
	fi
	$(MAKE) build

# Build release s√©curis√©
build-release: check-env
	@if [ "$(VERSION)" = "dev" ]; then \
		echo "$(RED)‚ùå Impossible de faire un build release sans tag Git$(NC)"; \
		echo "$(YELLOW)Cr√©ez un tag: git tag v1.0.0 && git push origin v1.0.0$(NC)"; \
		exit 1; \
	fi
	@if echo "$(VERSION)" | grep -q dirty; then \
		echo "$(RED)‚ùå Repository sale, commitez vos changements$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)üöÄ Build release $(VERSION)...$(NC)"
	$(MAKE) build

# Workflow intelligent selon l'environnement
auto-build:
	@echo "$(GREEN)ü§ñ Build automatique...$(NC)"
	@if [ "$(IS_CI)" = "true" ]; then \
		echo "$(GREEN)Environnement CI/CD d√©tect√©$(NC)"; \
		$(MAKE) build-ci; \
	elif [ "$(VERSION)" = "dev" ]; then \
		echo "$(GREEN)Environnement d√©veloppement d√©tect√©$(NC)"; \
		$(MAKE) build-dev; \
	else \
		echo "$(GREEN)Build standard$(NC)"; \
		$(MAKE) build; \
	fi

# Cr√©er un tag de d√©veloppement
create-dev-tag:
	@if [ -z "$(TAG)" ]; then \
		echo "$(RED)‚ùå Usage: make create-dev-tag TAG=v1.0.0-alpha$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)üè∑Ô∏è  Cr√©ation du tag d√©veloppement $(TAG)...$(NC)"
	git tag -a $(TAG) -m "Development tag $(TAG)"
	@echo "$(GREEN)‚úÖ Tag $(TAG) cr√©√© (push avec: git push origin $(TAG))$(NC)"

# Nettoyage des tags de d√©veloppement
clean-dev-tags:
	@echo "$(GREEN)üßπ Suppression des tags de d√©veloppement...$(NC)"
	@git tag -l | grep -E "(dev|alpha|beta|rc)" | while read tag; do \
		echo "Suppression de $$tag"; \
		git tag -d $$tag; \
	done
	@echo "$(GREEN)‚úÖ Tags de d√©veloppement supprim√©s$(NC)"

# Tests
test:
	@echo "$(GREEN)üß™ Lancement des tests...$(NC)"
	dotnet test $(PROJECT_FILE) --logger "console;verbosity=detailed"

# Nettoyage
clean:
	@echo "$(GREEN)üßπ Nettoyage des artifacts...$(NC)"
	dotnet clean $(PROJECT_FILE)
	rm -rf bin obj
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"


# Cible interne (priv√©e) pour lancer l'application.
# L'environnement est pass√© via une variable ENV.
_run: build
	@echo "$(GREEN)üöÄ Lancement en mode $(ENV)...$(NC)"
	@echo "$(YELLOW)URL: http://localhost:5000 | https://localhost:5001$(NC)"
	ASPNETCORE_ENVIRONMENT=$(ENV) dotnet run \
		--project $(PROJECT_FILE) \
		--configuration Release \
		--no-build \
		--urls="http://localhost:5000;https://localhost:5001"

# Cibles publiques, faciles √† utiliser
run-dev:
	@$(MAKE) _run ENV=Development

run-prod:
	@$(MAKE) _run ENV=Production

# Lancement Railway (simulation)
run-railway:
	@echo "$(GREEN)üöÄ Lancement en mode Railway...$(NC)"
	@echo "$(YELLOW)URL: http://localhost:8080$(NC)"
	ASPNETCORE_ENVIRONMENT=ProductionRailway dotnet run --project $(PROJECT_FILE) --no-build --urls="http://localhost:8080"

# Configuration d√©veloppement compl√®te
dev-setup: ef-install ssl-dev install build
	@echo "$(GREEN)üéâ Environnement de d√©veloppement configur√© !$(NC)"
	@echo "$(YELLOW)Vous pouvez maintenant utiliser: make run-dev$(NC)"

# === Installation Ubuntu ===

# Installation compl√®te environnement Ubuntu
ubuntu-setup: system-update dotnet-install vscode-install tools-install ef-install
	@echo "$(GREEN)üéâ Installation compl√®te Ubuntu termin√©e !$(NC)"
	@echo "$(YELLOW)Red√©marrez votre terminal pour que tous les outils soient disponibles$(NC)"

# Mise √† jour du syst√®me Ubuntu
system-update:
	@echo "$(GREEN)üêß Mise √† jour du syst√®me Ubuntu...$(NC)"
	sudo apt update && sudo apt upgrade -y
	sudo apt install -y curl wget apt-transport-https software-properties-common
	@echo "$(GREEN)‚úÖ Syst√®me Ubuntu mis √† jour$(NC)"

# Installation de .NET 8 SDK
dotnet-install:
	@echo "$(GREEN)üîß Installation de .NET 8 SDK...$(NC)"
	@if command -v dotnet >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  .NET SDK d√©j√† install√© : $(shell dotnet --version)$(NC)"; \
	else \
		wget https://packages.microsoft.com/config/ubuntu/$(shell lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb; \
		sudo dpkg -i packages-microsoft-prod.deb; \
		rm packages-microsoft-prod.deb; \
		sudo apt update; \
		sudo apt install -y dotnet-sdk-8.0; \
		echo "$(GREEN)‚úÖ .NET 8 SDK install√©$(NC)"; \
	fi

# Installation de Visual Studio Code + extensions
vscode-install:
	@echo "$(GREEN)üíª Installation de Visual Studio Code...$(NC)"
	@if command -v code >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  Visual Studio Code d√©j√† install√©$(NC)"; \
	else \
		wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg; \
		sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/; \
		sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'; \
		sudo apt update; \
		sudo apt install -y code; \
		echo "$(GREEN)‚úÖ Visual Studio Code install√©$(NC)"; \
	fi
	@echo "$(GREEN)üîå Installation des extensions Visual Studio Code...$(NC)"
	code --install-extension ms-dotnettools.csharp
	code --install-extension ms-dotnettools.csdevkit
	code --install-extension ms-dotnettools.vscode-dotnet-runtime
	code --install-extension ms-vscode.vscode-json
	code --install-extension bradlc.vscode-tailwindcss
	code --install-extension esbenp.prettier-vscode
	code --install-extension ms-vscode.vscode-typescript-next
	code --install-extension formulahendry.auto-rename-tag
	code --install-extension christian-kohler.path-intellisense
	code --install-extension ms-vscode-remote.remote-containers
	code --install-extension ms-azuretools.vscode-docker
	code --install-extension humao.rest-client
	code --install-extension ms-dotnettools.dotnet-interactive-vscode
	@echo "$(GREEN)‚úÖ Extensions Visual Studio Code install√©es$(NC)"

# Installation de tous les outils de d√©veloppement
tools-install:
	@echo "$(GREEN)üõ†Ô∏è  Installation des outils de d√©veloppement...$(NC)"

	# Git
	@if ! command -v git >/dev/null 2>&1; then \
		sudo apt install -y git; \
		echo "$(GREEN)‚úÖ Git install√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Git d√©j√† install√© : $(shell git --version)$(NC)"; \
	fi

	# Node.js et npm (pour outils front-end)
	@if ! command -v node >/dev/null 2>&1; then \
		curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -; \
		sudo apt install -y nodejs; \
		echo "$(GREEN)‚úÖ Node.js install√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Node.js d√©j√† install√© : $(shell node --version)$(NC)"; \
	fi

	# Docker
	@if ! command -v docker >/dev/null 2>&1; then \
		sudo apt install -y ca-certificates gnupg lsb-release; \
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg; \
		echo "deb [arch=$(shell dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(shell lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null; \
		sudo apt update; \
		sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin; \
		sudo usermod -aG docker $$USER; \
		echo "$(GREEN)‚úÖ Docker install√©$(NC)"; \
		echo "$(YELLOW)‚ö†Ô∏è  Red√©marrez votre session pour utiliser Docker sans sudo$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Docker d√©j√† install√© : $(shell docker --version)$(NC)"; \
	fi

	# MySQL Client
	@if ! command -v mysql >/dev/null 2>&1; then \
		sudo apt install -y mysql-client; \
		echo "$(GREEN)‚úÖ MySQL Client install√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  MySQL Client d√©j√† install√©$(NC)"; \
	fi

	# Postman (alternative en ligne de commande : HTTPie)
	@if ! command -v http >/dev/null 2>&1; then \
		sudo apt install -y httpie; \
		echo "$(GREEN)‚úÖ HTTPie install√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  HTTPie d√©j√† install√©$(NC)"; \
	fi

	# OpenSSL pour les certificats
	@if ! command -v openssl >/dev/null 2>&1; then \
		sudo apt install -y openssl; \
		echo "$(GREEN)‚úÖ OpenSSL install√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  OpenSSL d√©j√† install√©$(NC)"; \
	fi

	# Railway CLI
	@if ! command -v railway >/dev/null 2>&1; then \
		curl -fsSL https://railway.app/install.sh | sh; \
		echo "$(GREEN)‚úÖ Railway CLI install√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Railway CLI d√©j√† install√©$(NC)"; \
	fi

	# Outils de build
	sudo apt install -y build-essential

	@echo "$(GREEN)‚úÖ Tous les outils de d√©veloppement install√©s$(NC)"

# === Gestion des packages NuGet ===

# Restaurer les packages NuGet
nuget-restore:
	@echo "$(GREEN)üì¶ Restauration des packages NuGet...$(NC)"
	dotnet restore $(PROJECT_FILE) --verbosity normal
	@echo "$(GREEN)‚úÖ Packages NuGet restaur√©s$(NC)"

# Mettre √† jour les packages NuGet
nuget-update:
	@echo "$(GREEN)üì¶ Mise √† jour des packages NuGet...$(NC)"
	dotnet list $(PROJECT_FILE) package --outdated
	@echo "$(YELLOW)Pour mettre √† jour un package sp√©cifique, utilisez:$(NC)"
	@echo "$(YELLOW)  dotnet add package <PackageName>$(NC)"

# Nettoyer le cache NuGet
nuget-clean:
	@echo "$(GREEN)üßπ Nettoyage du cache NuGet...$(NC)"
	dotnet nuget locals all --clear
	@echo "$(GREEN)‚úÖ Cache NuGet nettoy√©$(NC)"

# Lister les packages obsol√®tes
nuget-outdated:
	@echo "$(GREEN)üìã Packages NuGet obsol√®tes:$(NC)"
	dotnet list $(PROJECT_FILE) package --outdated --include-transitive

# === Gestion d'Entity Framework Core ===

# Installation d'Entity Framework Core CLI
ef-install:
	@echo "$(GREEN)üîß Installation d'Entity Framework Core globalement...$(NC)"
	dotnet tool install --global dotnet-ef
	@echo "$(GREEN)‚úÖ Entity Framework Core install√©$(NC)"

# V√©rification de la version d'Entity Framework Core
ef-check:
	@echo "$(GREEN)üîç V√©rification de la version d'Entity Framework Core...$(NC)"
	@if command -v dotnet-ef >/dev/null 2>&1; then \
		dotnet ef --version; \
		echo "$(GREEN)‚úÖ Entity Framework Core est install√©$(NC)"; \
	else \
		echo "$(RED)‚ùå Entity Framework Core n'est pas install√©$(NC)"; \
		echo "$(YELLOW)Utilisez: make ef-install$(NC)"; \
	fi

# === Gestion des certificats SSL ===

# Nettoyage certificats
ssl-clean:
	@echo "$(GREEN)üßπ Nettoyage des certificats...$(NC)"
	dotnet dev-certs https --clean
	rm -f localhost.pfx localhost.crt localhost.key
	@echo "$(GREEN)‚úÖ Certificats nettoy√©s$(NC)"

# G√©n√©ration certificats d√©veloppement
ssl-dev:
	@echo "$(GREEN)üîí G√©n√©ration des certificats de d√©veloppement...$(NC)"
	@echo "$(YELLOW)M√©thode 1: Certificats .NET$(NC)"
	dotnet dev-certs https --clean
	dotnet dev-certs https --trust
	@echo "$(YELLOW)M√©thode 2: Certificats OpenSSL personnalis√©s$(NC)"
	@if command -v openssl >/dev/null 2>&1; then \
		openssl req -x509 -newkey rsa:4096 -keyout localhost.key -out localhost.crt -days 365 -nodes \
			-subj "/C=FR/ST=Normandy/L=Rouen/O=LibraryAPI/CN=localhost" \
			-addext "subjectAltName=DNS:localhost,IP:127.0.0.1"; \
		openssl pkcs12 -export -out localhost.pfx -inkey localhost.key -in localhost.crt -password pass:DevPassword123; \
		echo "$(GREEN)‚úÖ Certificats OpenSSL cr√©√©s$(NC)"; \
	else \
		echo "$(RED)‚ùå OpenSSL non install√©, utilisation des certificats .NET uniquement$(NC)"; \
	fi

# Approbation certificats syst√®me
ssl-trust:
	@echo "$(GREEN)üîí Approbation des certificats syst√®me...$(NC)"
	@if [ -f localhost.crt ]; then \
		sudo cp localhost.crt /usr/local/share/ca-certificates/localhost-dev.crt; \
		sudo update-ca-certificates; \
		echo "$(GREEN)‚úÖ Certificat ajout√© au syst√®me$(NC)"; \
	else \
		echo "$(RED)‚ùå Fichier localhost.crt non trouv√©$(NC)"; \
	fi

# === Migrations Entity Framework ===

# V√©rifier Entity Framework CLI
check-ef:
	@if ! command -v dotnet-ef >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  Entity Framework CLI non install√©, installation...$(NC)"; \
		make ef-install; \
	fi

# Ajouter migration
migration-add: check-ef
	@if [ -z "$(NAME)" ]; then \
		echo "$(RED)‚ùå Usage: make migration-add NAME=NomDeLaMigration$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)üìù Ajout de la migration: $(NAME)$(NC)"
	dotnet ef migrations add $(NAME) --project $(PROJECT_FILE)

# Appliquer migrations
migration-update: check-ef
	@echo "$(GREEN)üìù Application des migrations...$(NC)"
	dotnet ef database update --project $(PROJECT_FILE)
	@echo "$(GREEN)‚úÖ Migrations appliqu√©es$(NC)"

# Lister migrations
migration-list: check-ef
	@echo "$(GREEN)üìù Liste des migrations:$(NC)"
	dotnet ef migrations list --project $(PROJECT_FILE)

# Supprimer derni√®re migration
migration-remove: check-ef
	@echo "$(GREEN)‚ùå Suppression de la derni√®re migration...$(NC)"
	dotnet ef migrations remove --project $(PROJECT_FILE)

# G√©n√©rer script SQL
migration-script: check-ef
	@echo "$(GREEN)üìù G√©n√©ration du script SQL...$(NC)"
	dotnet ef migrations script --project $(PROJECT_FILE) --output migrations.sql
	@echo "$(GREEN)‚úÖ Script g√©n√©r√©: migrations.sql$(NC)"

# === Railway ===

# V√©rifier Railway CLI
check-railway:
	@if ! command -v railway >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  Railway CLI non install√©, installation...$(NC)"; \
		curl -fsSL https://railway.app/install.sh | sh; \
	fi

# Connexion Railway
railway-login: check-railway
	@echo "$(GREEN)üöÄ Connexion √† Railway...$(NC)"
	railway login

# D√©ploiement Railway
railway-deploy: check-railway build
	@echo "$(GREEN)üöÄ D√©ploiement sur Railway...$(NC)"
	railway up

# Logs Railway
railway-logs: check-railway
	@echo "$(GREEN)üìã Logs Railway:$(NC)"
	railway logs

# Variables Railway
railway-vars: check-railway
	@echo "$(GREEN)üîß Variables Railway:$(NC)"
	railway variables

# === Docker ===

# Build image Docker
docker-build:
	@echo "$(GREEN)üê≥ Build de l'image Docker...$(NC)"
	docker build -t $(DOCKER_IMAGE):$(DOCKER_TAG) .
	@echo "$(GREEN)‚úÖ Image Docker cr√©√©e$(NC)"

# Lancement conteneur
docker-run: docker-build
	@echo "$(GREEN)üê≥ Lancement du conteneur...$(NC)"
	@echo "$(YELLOW)URL: http://localhost:8080$(NC)"
	docker run -p 8080:8080 --rm --name $(PROJECT_NAME) $(DOCKER_IMAGE):$(DOCKER_TAG)

# Nettoyage Docker
docker-clean:
	@echo "$(GREEN)üßπ Nettoyage Docker...$(NC)"
	docker rmi $(DOCKER_IMAGE):$(DOCKER_TAG) 2>/dev/null || true
	docker system prune -f

# === Utilitaires ===

# V√©rification sant√© du projet
health-check:
	@echo "$(GREEN)üè• V√©rification de sant√© du projet...$(NC)"
	@echo "$(YELLOW)Version .NET:$(NC)"
	@dotnet --version
	@echo "$(YELLOW)Packages obsol√®tes:$(NC)"
	@dotnet list package --outdated
	@echo "$(YELLOW)S√©curit√©:$(NC)"
	@dotnet list package --vulnerable

# Installation outils de d√©veloppement
install-tools: ef-install
	@echo "$(GREEN)üõ†Ô∏è  Installation des outils de d√©veloppement globaux...$(NC)"
	@if ! command -v dotnet-outdated >/dev/null 2>&1; then \
		dotnet tool install --global dotnet-outdated-tool; \
		echo "$(GREEN)‚úÖ dotnet-outdated install√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  dotnet-outdated d√©j√† install√©$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ Outils globaux install√©s$(NC)"

# Mise √† jour des packages
update-packages:
	@echo "$(GREEN)üì¶ Mise √† jour des packages...$(NC)"
	dotnet-outdated upgrade
	@echo "$(GREEN)‚úÖ Packages mis √† jour$(NC)"

# Publish avec version Git
publish:
	@echo "$(GREEN)üì¶ Publication $(VERSION)...$(NC)"
	dotnet publish $(PROJECT_FILE) \
		--configuration Release \
		--output ./publish \
		-p:Version="$(DOTNET_VERSION)" \
		-p:InformationalVersion="$(VERSION_FULL)" \
		-p:GitTag="$(GIT_TAG)" \
		-p:GitCommit="$(GIT_COMMIT)" \
		-p:GitBranch="$(GIT_BRANCH)" \
		-p:BuildTime="$(BUILD_TIME)"
	@echo "$(GREEN)‚úÖ Publication termin√©e dans ./publish$(NC)"

# Workflow complet de release
workflow-release:
	@if [ -z "$(TAG)" ]; then \
		echo "$(RED)‚ùå Usage: make workflow-release TAG=v1.2.3$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)üîÑ Workflow de release pour $(TAG)...$(NC)"
	$(MAKE) check-env
	@if [ -n "$(shell git status --porcelain)" ]; then \
		echo "$(RED)‚ùå Repository sale, commit d'abord$(NC)"; \
		exit 1; \
	fi
	git tag -a $(TAG) -m "Release $(TAG)"
	$(MAKE) build
	git push origin $(TAG)
	@echo "$(GREEN)üéâ Release $(TAG) termin√©e et pouss√©e !$(NC)"

# Aide pour les commandes de version
version-help:
	@echo "$(GREEN)üì¶ Guide des versions Git:$(NC)"
	@echo ""
	@echo "$(YELLOW)üè∑Ô∏è  Cr√©er des tags:$(NC)"
	@echo "  git tag v1.0.0                    # Tag simple"
	@echo "  git tag -a v1.0.0 -m 'Release'    # Tag avec message"
	@echo "  git push origin v1.0.0            # Pousser le tag"
	@echo ""
	@echo "$(YELLOW)üîç V√©rifier l'√©tat:$(NC)"
	@echo "  make version-info                 # Voir toutes les infos"
	@echo "  make check-env                    # V√©rifier environnement"
	@echo "  git status                        # √âtat du repository"
	@echo ""
	@echo "$(YELLOW)üöÄ Builds:$(NC)"
	@echo "  make build                        # Build auto avec version Git"
	@echo "  make build-dev                    # Build d√©veloppement"
	@echo "  make build-release                # Build release (exige tag propre)"
	@echo "  make auto-build                   # Build intelligent"
	@echo ""
	@echo "$(YELLOW)üìã Exemples de versions:$(NC)"
	@echo "  Sans Git: dev"
	@echo "  Pas de tag: dev"
	@echo "  Tag propre: v1.0.2"
	@echo "  Repository sale: v1.0.2-dirty"
	@echo "  Tag d√©veloppement: v1.0.0-alpha"

# Docker avec version robuste
docker-build-versioned:
	@echo "$(GREEN)üê≥ Build Docker $(VERSION)...$(NC)"
	docker build \
		--build-arg VERSION="$(DOTNET_VERSION)" \
		--build-arg VERSION_FULL="$(VERSION_FULL)" \
		--build-arg GIT_TAG="$(GIT_TAG)" \
		--build-arg GIT_COMMIT="$(GIT_COMMIT)" \
		--build-arg BUILD_TIME="$(BUILD_TIME)" \
		-t $(DOCKER_IMAGE):$(if $(findstring dev,$(VERSION)),dev,$(shell echo $(VERSION) | sed 's/^v//')) \
		-t $(DOCKER_IMAGE):latest .
	@echo "$(GREEN)‚úÖ Image Docker cr√©√©e$(NC)"


